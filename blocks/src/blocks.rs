use crate::*;

define_blocks! {
    Air {
        props {},
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "air") },
        collision { _ => [], },
        hardness 0.0,
    }
    Stone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stone") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Granite {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "granite") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PolishedGranite {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_granite") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Diorite {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "diorite") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PolishedDiorite {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_diorite") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Andesite {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "andesite") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PolishedAndesite {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_andesite") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    GrassBlock {
        props {
            snowy: bool = [true, false],
        },
        offset if snowy { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "grass_block") },
        variant format!("snowy={}", snowy),
        tint TintType::Grass,
        update_state (world, pos) => GrassBlock { snowy: is_snowy(world, pos) },
        hardness 0.6,
        best_tools [ Tool::Shovel(_), ],
    }
    Dirt {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dirt") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    CoarseDirt {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "coarse_dirt") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    Podzol {
        props {
            snowy: bool = [true, false],
        },
        offset if snowy { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "podzol") },
        variant format!("snowy={}", snowy),
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    Cobblestone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cobblestone") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    OakPlanks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oak_planks") },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    SprucePlanks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "spruce_planks") },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    BirchPlanks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "birch_planks") },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    JunglePlanks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jungle_planks") },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    AcaciaPlanks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "acacia_planks") },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    DarkOakPlanks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_oak_planks") },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    MangrovePlanks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mangrove_planks") },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    OakSapling {
        props {
            stage: u8 = [0, 1],
        },
        offset stage as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "oak_sapling") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    SpruceSapling {
        props {
            stage: u8 = [0, 1],
        },
        offset stage as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "spruce_sapling") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    BirchSapling {
        props {
            stage: u8 = [0, 1],
        },
        offset stage as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "birch_sapling") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    JungleSapling {
        props {
            stage: u8 = [0, 1],
        },
        offset stage as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "jungle_sapling") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    AcaciaSapling {
        props {
            stage: u8 = [0, 1],
        },
        offset stage as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "acacia_sapling") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    DarkOakSapling {
        props {
            stage: u8 = [0, 1],
        },
        offset stage as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dark_oak_sapling") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    MangrovePropagule {
        props {
            age: u8 = [0, 1, 2, 3, 4],
            hanging: bool = [true, false],
            stage: u8 = [0, 1],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            stage as usize * 2 +
            if hanging { 0 } else { 4 } +
            age as usize * 8
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "mangrove_propagule") },
        variant format!("age={},hanging={}", age, hanging),
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    Bedrock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "bedrock") },
    }
    Water {
        props {
            level: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset level as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "water") },
        tint TintType::Water,
        collision { _ => [], },
        hardness 100.0,
    }
    Lava {
        props {
            level: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset level as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 15,
            collidable: false,
        },
        model { ("minecraft", "lava") },
        collision { _ => [], },
        hardness 100.0,
    }
    Sand {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "sand") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    RedSand {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_sand") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    Gravel {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gravel") },
        hardness 0.6,
        best_tools [ Tool::Shovel(_), ],
    }
    GoldOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gold_ore") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeepslateGoldOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_gold_ore") },
        hardness 4.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    IronOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "iron_ore") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeepslateIronOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_iron_ore") },
        hardness 4.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CoalOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "coal_ore") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeepslateCoalOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_coal_ore") },
        hardness 4.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    NetherGoldOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "nether_gold_ore") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    OakLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oak_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    SpruceLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "spruce_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    BirchLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "birch_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    JungleLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jungle_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    AcaciaLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "acacia_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    DarkOakLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_oak_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    MangroveLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mangrove_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    MangroveRoots {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mangrove_roots") },
        hardness 0.7,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    MuddyMangroveRoots {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "muddy_mangrove_roots") },
        variant format!("axis={}", axis.as_string()),
        hardness 0.7,
        best_tools [ Tool::Shovel(_), ],
    }
    StrippedSpruceLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_spruce_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedBirchLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_birch_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedJungleLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_jungle_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedAcaciaLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_acacia_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedDarkOakLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_dark_oak_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedOakLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_oak_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedMangroveLog {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_mangrove_log") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    OakWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oak_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    SpruceWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "spruce_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    BirchWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "birch_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    JungleWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jungle_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    AcaciaWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "acacia_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    DarkOakWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_oak_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    MangroveWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mangrove_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedOakWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_oak_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedSpruceWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_spruce_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedBirchWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_birch_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedJungleWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_jungle_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedAcaciaWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_acacia_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedDarkOakWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_dark_oak_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedMangroveWood {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_mangrove_wood") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    OakLeaves {
        props {
            distance: u8 = [1, 2, 3, 4, 5, 6, 7],
            persistent: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if persistent { 0 } else { 2 } +
            (distance as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: true,
            force_shade: true,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oak_leaves") },
        tint TintType::Foliage,
        hardness 0.2,
        best_tools [ Tool::Shears, Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    SpruceLeaves {
        props {
            distance: u8 = [1, 2, 3, 4, 5, 6, 7],
            persistent: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if persistent { 0 } else { 2 } +
            (distance as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: true,
            force_shade: true,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "spruce_leaves") },
        tint TintType::Color { r: 97, g: 153, b: 97 },
        hardness 0.2,
        best_tools [ Tool::Shears, Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    BirchLeaves {
        props {
            distance: u8 = [1, 2, 3, 4, 5, 6, 7],
            persistent: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if persistent { 0 } else { 2 } +
            (distance as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: true,
            force_shade: true,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "birch_leaves") },
        tint TintType::Color { r: 128, g: 167, b: 85 },
        hardness 0.2,
        best_tools [ Tool::Shears, Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    JungleLeaves {
        props {
            distance: u8 = [1, 2, 3, 4, 5, 6, 7],
            persistent: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if persistent { 0 } else { 2 } +
            (distance as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: true,
            force_shade: true,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jungle_leaves") },
        tint TintType::Foliage,
        hardness 0.2,
        best_tools [ Tool::Shears, Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    AcaciaLeaves {
        props {
            distance: u8 = [1, 2, 3, 4, 5, 6, 7],
            persistent: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if persistent { 0 } else { 2 } +
            (distance as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: true,
            force_shade: true,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "acacia_leaves") },
        tint TintType::Foliage,
        hardness 0.2,
        best_tools [ Tool::Shears, Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    DarkOakLeaves {
        props {
            distance: u8 = [1, 2, 3, 4, 5, 6, 7],
            persistent: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if persistent { 0 } else { 2 } +
            (distance as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: true,
            force_shade: true,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_oak_leaves") },
        tint TintType::Foliage,
        hardness 0.2,
        best_tools [ Tool::Shears, Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    MangroveLeaves {
        props {
            distance: u8 = [1, 2, 3, 4, 5, 6, 7],
            persistent: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if persistent { 0 } else { 2 } +
            (distance as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: true,
            force_shade: true,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mangrove_leaves") },
        hardness 0.2,
        best_tools [ Tool::Shears, Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    AzaleaLeaves {
        props {
            distance: u8 = [1, 2, 3, 4, 5, 6, 7],
            persistent: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if persistent { 0 } else { 2 } +
            (distance as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: true,
            force_shade: true,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "azalea_leaves") },
        hardness 0.2,
        best_tools [ Tool::Shears, Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    FloweringAzaleaLeaves {
        props {
            distance: u8 = [1, 2, 3, 4, 5, 6, 7],
            persistent: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if persistent { 0 } else { 2 } +
            (distance as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: true,
            force_shade: true,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "flowering_azalea_leaves") },
        hardness 0.2,
        best_tools [ Tool::Shears, Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    Sponge {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "sponge") },
        hardness 0.6,
        best_tools [ Tool::Hoe(_), ],
    }
    WetSponge {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "wet_sponge") },
        hardness 0.6,
        best_tools [ Tool::Hoe(_), ],
    }
    Glass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "glass") },
        hardness 0.3,
    }
    LapisOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lapis_ore") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeepslateLapisOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_lapis_ore") },
        hardness 4.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    LapisBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lapis_block") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Dispenser {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
            triggered: bool = [true, false],
        },
        offset (
            if triggered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::East => 2,
                Direction::South => 4,
                Direction::West => 6,
                Direction::Up => 8,
                Direction::Down => 10,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dispenser") },
        variant format!("facing={}", facing.as_string()),
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Sandstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "sandstone") },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    ChiseledSandstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chiseled_sandstone") },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CutSandstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cut_sandstone") },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    NoteBlock {
        props {
            instrument: NoteBlockInstrument = [NoteBlockInstrument::Harp, NoteBlockInstrument::Basedrum, NoteBlockInstrument::Snare, NoteBlockInstrument::Hat, NoteBlockInstrument::Bass, NoteBlockInstrument::Flute, NoteBlockInstrument::Bell, NoteBlockInstrument::Guitar, NoteBlockInstrument::Chime, NoteBlockInstrument::Xylophone, NoteBlockInstrument::IronXylophone, NoteBlockInstrument::CowBell, NoteBlockInstrument::Didgeridoo, NoteBlockInstrument::Bit, NoteBlockInstrument::Banjo, NoteBlockInstrument::Pling],
            note: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            note as usize * 2 +
            match instrument {
                NoteBlockInstrument::Harp => 0,
                NoteBlockInstrument::Basedrum => 50,
                NoteBlockInstrument::Snare => 100,
                NoteBlockInstrument::Hat => 150,
                NoteBlockInstrument::Bass => 200,
                NoteBlockInstrument::Flute => 250,
                NoteBlockInstrument::Bell => 300,
                NoteBlockInstrument::Guitar => 350,
                NoteBlockInstrument::Chime => 400,
                NoteBlockInstrument::Xylophone => 450,
                NoteBlockInstrument::IronXylophone => 500,
                NoteBlockInstrument::CowBell => 550,
                NoteBlockInstrument::Didgeridoo => 600,
                NoteBlockInstrument::Bit => 650,
                NoteBlockInstrument::Banjo => 700,
                NoteBlockInstrument::Pling => 750,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "note_block") },
        hardness 0.8,
        best_tools [ Tool::Axe(_), ],
    }
    WhiteBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    OrangeBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    MagentaBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    LightBlueBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    YellowBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    LimeBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    PinkBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    GrayBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    LightGrayBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    CyanBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    PurpleBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    BlueBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    BrownBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    GreenBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    RedBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    BlackBed {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            occupied: bool = [true, false],
            part: BedPart = [BedPart::Head, BedPart::Foot],
        },
        offset (
            match part {
                BedPart::Head => 0,
                BedPart::Foot => 1,
            } +
            if occupied { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_bed") },
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.5625, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 1.0)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.5625, 0.1875)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            9 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            11 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
            14 => [
                ((0.8125, 0.0, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.8125, 0.0, 0.8125), (1.0, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.0), (0.8125, 0.5625, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.1875, 0.5625, 0.1875)),
                ((0.0, 0.0, 0.8125), (0.1875, 0.5625, 1.0)),
                ((0.0, 0.1875, 0.1875), (1.0, 0.5625, 0.8125)),
                ((0.1875, 0.1875, 0.0), (1.0, 0.5625, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 0.2,
    }
    PoweredRail {
        props {
            powered: bool = [true, false],
            shape: RailShape = [RailShape::NorthSouth, RailShape::EastWest, RailShape::AscendingEast, RailShape::AscendingWest, RailShape::AscendingNorth, RailShape::AscendingSouth],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                RailShape::NorthSouth => 0,
                RailShape::EastWest => 2,
                RailShape::AscendingEast => 4,
                RailShape::AscendingWest => 6,
                RailShape::AscendingNorth => 8,
                RailShape::AscendingSouth => 10,
                _ => unreachable!(),
            } +
            if powered { 0 } else { 12 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "powered_rail") },
        variant format!("powered={},shape={}", powered, shape.as_string()),
        collision { _ => [], },
        hardness 0.7,
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DetectorRail {
        props {
            powered: bool = [true, false],
            shape: RailShape = [RailShape::NorthSouth, RailShape::EastWest, RailShape::AscendingEast, RailShape::AscendingWest, RailShape::AscendingNorth, RailShape::AscendingSouth],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                RailShape::NorthSouth => 0,
                RailShape::EastWest => 2,
                RailShape::AscendingEast => 4,
                RailShape::AscendingWest => 6,
                RailShape::AscendingNorth => 8,
                RailShape::AscendingSouth => 10,
                _ => unreachable!(),
            } +
            if powered { 0 } else { 12 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "detector_rail") },
        variant format!("powered={},shape={}", powered, shape.as_string()),
        collision { _ => [], },
        hardness 0.7,
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    StickyPiston {
        props {
            extended: bool = [true, false],
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset (
            match facing {
                Direction::North => 0,
                Direction::East => 1,
                Direction::South => 2,
                Direction::West => 3,
                Direction::Up => 4,
                Direction::Down => 5,
                _ => unreachable!(),
            } +
            if extended { 0 } else { 6 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "sticky_piston") },
        variant format!("extended={},facing={}", extended, facing.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.25), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.75, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 0.75, 1.0)),
            ],
            5 => [
                ((0.0, 0.25, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        best_tools [ Tool::Pickaxe(_), ],
    }
    Cobweb {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "cobweb") },
        collision { _ => [], },
        hardness 4.0,
        harvest_tools [
            Tool::Sword(ToolMaterial::Wooden),
            Tool::Sword(ToolMaterial::Stone),
            Tool::Sword(ToolMaterial::Golden),
            Tool::Sword(ToolMaterial::Iron),
            Tool::Sword(ToolMaterial::Diamond),
            Tool::Sword(ToolMaterial::Netherite),
            Tool::Shears,
        ],
        best_tools [ Tool::Sword(_), Tool::Shears, ],
    }
    Grass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "grass") },
        tint TintType::Grass,
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    Fern {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "fern") },
        tint TintType::Grass,
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    DeadBush {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_bush") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    Seagrass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "seagrass") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged true,
    }
    TallSeagrass {
        props {
            half: TallSeagrassHalf = [TallSeagrassHalf::Upper, TallSeagrassHalf::Lower],
        },
        offset match half {
            TallSeagrassHalf::Upper => 0,
            TallSeagrassHalf::Lower => 1,
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "tall_seagrass") },
        variant format!("half={}", half.as_string()),
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged true,
    }
    Piston {
        props {
            extended: bool = [true, false],
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset (
            match facing {
                Direction::North => 0,
                Direction::East => 1,
                Direction::South => 2,
                Direction::West => 3,
                Direction::Up => 4,
                Direction::Down => 5,
                _ => unreachable!(),
            } +
            if extended { 0 } else { 6 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "piston") },
        variant format!("extended={},facing={}", extended, facing.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.25), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.75, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 0.75, 1.0)),
            ],
            5 => [
                ((0.0, 0.25, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        best_tools [ Tool::Pickaxe(_), ],
    }
    PistonHead {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
            short: bool = [true, false],
            type_: PistonType = [PistonType::Normal, PistonType::Sticky],
        },
        offset (
            match type_ {
                PistonType::Normal => 0,
                PistonType::Sticky => 1,
            } +
            if short { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::East => 4,
                Direction::South => 8,
                Direction::West => 12,
                Direction::Up => 16,
                Direction::Down => 20,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "piston_head") },
        variant format!("facing={},short={},type={}", facing.as_string(), short, type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.25)),
                ((0.375, 0.375, 0.25), (0.625, 0.625, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.25)),
                ((0.375, 0.375, 0.25), (0.625, 0.625, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.25)),
                ((0.375, 0.375, 0.25), (0.625, 0.625, 1.25)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.25)),
                ((0.375, 0.375, 0.25), (0.625, 0.625, 1.25)),
            ],
            4 => [
                ((0.75, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.375, 0.375), (0.75, 0.625, 0.625)),
            ],
            5 => [
                ((0.75, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.375, 0.375), (0.75, 0.625, 0.625)),
            ],
            6 => [
                ((0.75, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((-0.25, 0.375, 0.375), (0.75, 0.625, 0.625)),
            ],
            7 => [
                ((0.75, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((-0.25, 0.375, 0.375), (0.75, 0.625, 0.625)),
            ],
            8 => [
                ((0.0, 0.0, 0.75), (1.0, 1.0, 1.0)),
                ((0.375, 0.375, 0.0), (0.625, 0.625, 0.75)),
            ],
            9 => [
                ((0.0, 0.0, 0.75), (1.0, 1.0, 1.0)),
                ((0.375, 0.375, 0.0), (0.625, 0.625, 0.75)),
            ],
            10 => [
                ((0.0, 0.0, 0.75), (1.0, 1.0, 1.0)),
                ((0.375, 0.375, -0.25), (0.625, 0.625, 0.75)),
            ],
            11 => [
                ((0.0, 0.0, 0.75), (1.0, 1.0, 1.0)),
                ((0.375, 0.375, -0.25), (0.625, 0.625, 0.75)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (0.25, 1.0, 1.0)),
                ((0.25, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (0.25, 1.0, 1.0)),
                ((0.25, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (0.25, 1.0, 1.0)),
                ((0.25, 0.375, 0.375), (1.25, 0.625, 0.625)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (0.25, 1.0, 1.0)),
                ((0.25, 0.375, 0.375), (1.25, 0.625, 0.625)),
            ],
            16 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
                ((0.0, 0.75, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.75, 0.0), (1.0, 1.0, 0.375)),
                ((0.375, 0.75, 0.625), (1.0, 1.0, 1.0)),
                ((0.625, 0.75, 0.375), (1.0, 1.0, 0.625)),
            ],
            17 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
                ((0.0, 0.75, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.75, 0.0), (1.0, 1.0, 0.375)),
                ((0.375, 0.75, 0.625), (1.0, 1.0, 1.0)),
                ((0.625, 0.75, 0.375), (1.0, 1.0, 0.625)),
            ],
            18 => [
                ((0.375, -0.25, 0.375), (0.625, 1.0, 0.625)),
                ((0.0, 0.75, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.75, 0.0), (1.0, 1.0, 0.375)),
                ((0.375, 0.75, 0.625), (1.0, 1.0, 1.0)),
                ((0.625, 0.75, 0.375), (1.0, 1.0, 0.625)),
            ],
            19 => [
                ((0.375, -0.25, 0.375), (0.625, 1.0, 0.625)),
                ((0.0, 0.75, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.75, 0.0), (1.0, 1.0, 0.375)),
                ((0.375, 0.75, 0.625), (1.0, 1.0, 1.0)),
                ((0.625, 0.75, 0.375), (1.0, 1.0, 0.625)),
            ],
            20 => [
                ((0.0, 0.0, 0.0), (1.0, 0.25, 1.0)),
                ((0.375, 0.25, 0.375), (0.625, 1.0, 0.625)),
            ],
            21 => [
                ((0.0, 0.0, 0.0), (1.0, 0.25, 1.0)),
                ((0.375, 0.25, 0.375), (0.625, 1.0, 0.625)),
            ],
            22 => [
                ((0.0, 0.0, 0.0), (1.0, 0.25, 1.0)),
                ((0.375, 0.25, 0.375), (0.625, 1.25, 0.625)),
            ],
            23 => [
                ((0.0, 0.0, 0.0), (1.0, 0.25, 1.0)),
                ((0.375, 0.25, 0.375), (0.625, 1.25, 0.625)),
            ],
        },
        hardness 1.5,
        best_tools [ Tool::Pickaxe(_), ],
    }
    WhiteWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_wool") },
        hardness 0.8,
    }
    OrangeWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_wool") },
        hardness 0.8,
    }
    MagentaWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_wool") },
        hardness 0.8,
    }
    LightBlueWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_wool") },
        hardness 0.8,
    }
    YellowWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_wool") },
        hardness 0.8,
    }
    LimeWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_wool") },
        hardness 0.8,
    }
    PinkWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_wool") },
        hardness 0.8,
    }
    GrayWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_wool") },
        hardness 0.8,
    }
    LightGrayWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_wool") },
        hardness 0.8,
    }
    CyanWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_wool") },
        hardness 0.8,
    }
    PurpleWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_wool") },
        hardness 0.8,
    }
    BlueWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_wool") },
        hardness 0.8,
    }
    BrownWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_wool") },
        hardness 0.8,
    }
    GreenWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_wool") },
        hardness 0.8,
    }
    RedWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_wool") },
        hardness 0.8,
    }
    BlackWool {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_wool") },
        hardness 0.8,
    }
    MovingPiston {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
            type_: PistonType = [PistonType::Normal, PistonType::Sticky],
        },
        offset (
            match type_ {
                PistonType::Normal => 0,
                PistonType::Sticky => 1,
            } +
            match facing {
                Direction::North => 0,
                Direction::East => 2,
                Direction::South => 4,
                Direction::West => 6,
                Direction::Up => 8,
                Direction::Down => 10,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "moving_piston") },
        collision { _ => [], },
    }
    Dandelion {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dandelion") },
        collision { _ => [], },
        hardness 0.0,
    }
    Poppy {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "poppy") },
        collision { _ => [], },
        hardness 0.0,
    }
    BlueOrchid {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "blue_orchid") },
        collision { _ => [], },
        hardness 0.0,
    }
    Allium {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "allium") },
        collision { _ => [], },
        hardness 0.0,
    }
    AzureBluet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "azure_bluet") },
        collision { _ => [], },
        hardness 0.0,
    }
    RedTulip {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "red_tulip") },
        collision { _ => [], },
        hardness 0.0,
    }
    OrangeTulip {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "orange_tulip") },
        collision { _ => [], },
        hardness 0.0,
    }
    WhiteTulip {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "white_tulip") },
        collision { _ => [], },
        hardness 0.0,
    }
    PinkTulip {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "pink_tulip") },
        collision { _ => [], },
        hardness 0.0,
    }
    OxeyeDaisy {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "oxeye_daisy") },
        collision { _ => [], },
        hardness 0.0,
    }
    Cornflower {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "cornflower") },
        collision { _ => [], },
        hardness 0.0,
    }
    WitherRose {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "wither_rose") },
        collision { _ => [], },
        hardness 0.0,
    }
    LilyOfTheValley {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "lily_of_the_valley") },
        collision { _ => [], },
        hardness 0.0,
    }
    BrownMushroom {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 1,
            collidable: false,
        },
        model { ("minecraft", "brown_mushroom") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    RedMushroom {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "red_mushroom") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    GoldBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gold_block") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    IronBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "iron_block") },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Bricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "bricks") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Tnt {
        props {
            unstable: bool = [true, false],
        },
        offset if unstable { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "tnt") },
        hardness 0.0,
    }
    Bookshelf {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "bookshelf") },
        hardness 1.5,
        best_tools [ Tool::Axe(_), ],
    }
    MossyCobblestone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mossy_cobblestone") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Obsidian {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "obsidian") },
        hardness 50.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Torch {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 14,
            collidable: false,
        },
        model { ("minecraft", "torch") },
        collision { _ => [], },
        hardness 0.0,
    }
    WallTorch {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 14,
            collidable: false,
        },
        model { ("minecraft", "wall_torch") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
    }
    Fire {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            up: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if up { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 } +
            age as usize * 32
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 15,
            collidable: false,
        },
        model { ("minecraft", "fire") },
        multipart (key, val) => match key {
            "age" => val.contains(&age.to_string()),
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "up" => val.contains(&up.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision { _ => [], },
        update_state (world, pos) => update_fire_state(world, pos, age),
        hardness 0.0,
    }
    SoulFire {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 10,
            collidable: false,
        },
        model { ("minecraft", "soul_fire") },
        collision { _ => [], },
        hardness 0.0,
    }
    Spawner {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "spawner") },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    OakStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oak_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => OakStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    Chest {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            type_: ChestType = [ChestType::Single, ChestType::Left, ChestType::Right],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                ChestType::Single => 0,
                ChestType::Left => 2,
                ChestType::Right => 4,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 6,
                Direction::West => 12,
                Direction::East => 18,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chest") },
        collision {
            0 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            1 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            2 => [
                ((0.0625, 0.0, 0.0625), (1.0, 0.875, 0.9375)),
            ],
            3 => [
                ((0.0625, 0.0, 0.0625), (1.0, 0.875, 0.9375)),
            ],
            4 => [
                ((0.0, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            5 => [
                ((0.0, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            6 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            7 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            8 => [
                ((0.0, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            9 => [
                ((0.0, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            10 => [
                ((0.0625, 0.0, 0.0625), (1.0, 0.875, 0.9375)),
            ],
            11 => [
                ((0.0625, 0.0, 0.0625), (1.0, 0.875, 0.9375)),
            ],
            12 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            13 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            14 => [
                ((0.0625, 0.0, 0.0), (0.9375, 0.875, 0.9375)),
            ],
            15 => [
                ((0.0625, 0.0, 0.0), (0.9375, 0.875, 0.9375)),
            ],
            16 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 1.0)),
            ],
            17 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 1.0)),
            ],
            18 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            19 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            20 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 1.0)),
            ],
            21 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 1.0)),
            ],
            22 => [
                ((0.0625, 0.0, 0.0), (0.9375, 0.875, 0.9375)),
            ],
            23 => [
                ((0.0625, 0.0, 0.0), (0.9375, 0.875, 0.9375)),
            ],
        },
        hardness 2.5,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    RedstoneWire {
        props {
            east: RedstoneSide = [RedstoneSide::Up, RedstoneSide::Side, RedstoneSide::None],
            north: RedstoneSide = [RedstoneSide::Up, RedstoneSide::Side, RedstoneSide::None],
            power: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            south: RedstoneSide = [RedstoneSide::Up, RedstoneSide::Side, RedstoneSide::None],
            west: RedstoneSide = [RedstoneSide::Up, RedstoneSide::Side, RedstoneSide::None],
        },
        offset (
            match west {
                RedstoneSide::Up => 0,
                RedstoneSide::Side => 1,
                RedstoneSide::None => 2,
            } +
            match south {
                RedstoneSide::Up => 0,
                RedstoneSide::Side => 3,
                RedstoneSide::None => 6,
            } +
            power as usize * 9 +
            match north {
                RedstoneSide::Up => 0,
                RedstoneSide::Side => 144,
                RedstoneSide::None => 288,
            } +
            match east {
                RedstoneSide::Up => 0,
                RedstoneSide::Side => 432,
                RedstoneSide::None => 864,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "redstone_wire") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "power" => val.contains(&power.to_string()),
            "south" => val.contains(south.as_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        tint match power {
            0 => TintType::Color { r: 76, g: 0, b: 0 },
            1 => TintType::Color { r: 112, g: 0, b: 0 },
            2 => TintType::Color { r: 122, g: 0, b: 0 },
            3 => TintType::Color { r: 132, g: 0, b: 0 },
            4 => TintType::Color { r: 142, g: 0, b: 0 },
            5 => TintType::Color { r: 153, g: 0, b: 0 },
            6 => TintType::Color { r: 163, g: 0, b: 0 },
            7 => TintType::Color { r: 173, g: 0, b: 0 },
            8 => TintType::Color { r: 183, g: 0, b: 0 },
            9 => TintType::Color { r: 193, g: 0, b: 0 },
            10 => TintType::Color { r: 204, g: 0, b: 0 },
            11 => TintType::Color { r: 214, g: 0, b: 0 },
            12 => TintType::Color { r: 224, g: 0, b: 0 },
            13 => TintType::Color { r: 234, g: 6, b: 0 },
            14 => TintType::Color { r: 244, g: 27, b: 0 },
            15 => TintType::Color { r: 255, g: 50, b: 0 },
            _ => unreachable!(),
        },
        collision { _ => [], },
        update_state (world, pos) => update_redstone_state(world, pos, power),
        hardness 0.0,
    }
    DiamondOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "diamond_ore") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeepslateDiamondOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_diamond_ore") },
        hardness 4.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DiamondBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "diamond_block") },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CraftingTable {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "crafting_table") },
        hardness 2.5,
        best_tools [ Tool::Axe(_), ],
    }
    Wheat {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "wheat") },
        variant format!("age={}", age),
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    Farmland {
        props {
            moisture: u8 = [0, 1, 2, 3, 4, 5, 6, 7],
        },
        offset moisture as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "farmland") },
        variant format!("moisture={}", moisture),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.9375, 1.0)),
            ],
        },
        hardness 0.6,
        best_tools [ Tool::Shovel(_), ],
    }
    Furnace {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            lit: bool = [true, false],
        },
        offset (
            if lit { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "furnace") },
        variant format!("facing={},lit={}", facing.as_string(), lit),
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    OakSign {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            rotation as usize * 2
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "oak_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    SpruceSign {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            rotation as usize * 2
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "spruce_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    BirchSign {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            rotation as usize * 2
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "birch_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    AcaciaSign {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            rotation as usize * 2
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "acacia_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    JungleSign {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            rotation as usize * 2
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "jungle_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    DarkOakSign {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            rotation as usize * 2
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dark_oak_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    MangroveSign {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            rotation as usize * 2
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "mangrove_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    OakDoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: DoorHalf = [DoorHalf::Upper, DoorHalf::Lower],
            hinge: Side = [Side::Left, Side::Right],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            match hinge {
                Side::Left => 0,
                Side::Right => 4,
            } +
            match half {
                DoorHalf::Upper => 0,
                DoorHalf::Lower => 8,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oak_door") },
        variant format!("facing={},half={},hinge={},open={}", facing.as_string(), half.as_string(), hinge.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            13 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            17 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            23 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            24 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            25 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            32 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            38 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            46 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => {
            let (facing, hinge, open, powered) = update_door_state(world, pos, half, facing, hinge, open, powered);
            OakDoor { facing, half, hinge, open, powered }
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
    }
    Ladder {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "ladder") },
        variant format!("facing={}", facing.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            4 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
        },
        hardness 0.4,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    Rail {
        props {
            shape: RailShape = [RailShape::NorthSouth, RailShape::EastWest, RailShape::AscendingEast, RailShape::AscendingWest, RailShape::AscendingNorth, RailShape::AscendingSouth, RailShape::SouthEast, RailShape::SouthWest, RailShape::NorthWest, RailShape::NorthEast],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                RailShape::NorthSouth => 0,
                RailShape::EastWest => 2,
                RailShape::AscendingEast => 4,
                RailShape::AscendingWest => 6,
                RailShape::AscendingNorth => 8,
                RailShape::AscendingSouth => 10,
                RailShape::SouthEast => 12,
                RailShape::SouthWest => 14,
                RailShape::NorthWest => 16,
                RailShape::NorthEast => 18,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "rail") },
        variant format!("shape={}", shape.as_string()),
        collision { _ => [], },
        hardness 0.7,
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    CobblestoneStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cobblestone_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => CobblestoneStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    OakWallSign {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "oak_wall_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    SpruceWallSign {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "spruce_wall_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    BirchWallSign {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "birch_wall_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    AcaciaWallSign {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "acacia_wall_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    JungleWallSign {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "jungle_wall_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    DarkOakWallSign {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dark_oak_wall_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    MangroveWallSign {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "mangrove_wall_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    Lever {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "lever") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
    }
    StonePressurePlate {
        props {
            powered: bool = [true, false],
        },
        offset if powered { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "stone_pressure_plate") },
        variant format!("powered={}", powered),
        collision { _ => [], },
        hardness 0.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    IronDoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: DoorHalf = [DoorHalf::Upper, DoorHalf::Lower],
            hinge: Side = [Side::Left, Side::Right],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            match hinge {
                Side::Left => 0,
                Side::Right => 4,
            } +
            match half {
                DoorHalf::Upper => 0,
                DoorHalf::Lower => 8,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "iron_door") },
        variant format!("facing={},half={},hinge={},open={}", facing.as_string(), half.as_string(), hinge.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            13 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            17 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            23 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            24 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            25 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            32 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            38 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            46 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => {
            let (facing, hinge, open, powered) = update_door_state(world, pos, half, facing, hinge, open, powered);
            IronDoor { facing, half, hinge, open, powered }
        },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    OakPressurePlate {
        props {
            powered: bool = [true, false],
        },
        offset if powered { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "oak_pressure_plate") },
        variant format!("powered={}", powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    SprucePressurePlate {
        props {
            powered: bool = [true, false],
        },
        offset if powered { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "spruce_pressure_plate") },
        variant format!("powered={}", powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    BirchPressurePlate {
        props {
            powered: bool = [true, false],
        },
        offset if powered { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "birch_pressure_plate") },
        variant format!("powered={}", powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    JunglePressurePlate {
        props {
            powered: bool = [true, false],
        },
        offset if powered { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "jungle_pressure_plate") },
        variant format!("powered={}", powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    AcaciaPressurePlate {
        props {
            powered: bool = [true, false],
        },
        offset if powered { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "acacia_pressure_plate") },
        variant format!("powered={}", powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    DarkOakPressurePlate {
        props {
            powered: bool = [true, false],
        },
        offset if powered { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dark_oak_pressure_plate") },
        variant format!("powered={}", powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    MangrovePressurePlate {
        props {
            powered: bool = [true, false],
        },
        offset if powered { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "mangrove_pressure_plate") },
        variant format!("powered={}", powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    RedstoneOre {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "redstone_ore") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeepslateRedstoneOre {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_redstone_ore") },
        hardness 4.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    RedstoneTorch {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 7,
            collidable: false,
        },
        model { ("minecraft", "redstone_torch") },
        variant format!("lit={}", lit),
        collision { _ => [], },
        hardness 0.0,
    }
    RedstoneWallTorch {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            lit: bool = [true, false],
        },
        offset (
            if lit { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 7,
            collidable: false,
        },
        model { ("minecraft", "redstone_wall_torch") },
        variant format!("facing={},lit={}", facing.as_string(), lit),
        collision { _ => [], },
        hardness 0.0,
    }
    StoneButton {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "stone_button") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Pickaxe(_), ],
    }
    Snow {
        props {
            layers: u8 = [1, 2, 3, 4, 5, 6, 7, 8],
        },
        offset (layers as usize - 1),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "snow") },
        variant format!("layers={}", layers),
        collision {
            0 => [
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 0.125, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.25, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.375, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 0.625, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (1.0, 0.75, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (1.0, 0.875, 1.0)),
            ],
        },
        hardness 0.1,
        harvest_tools [
            Tool::Shovel(ToolMaterial::Wooden),
            Tool::Shovel(ToolMaterial::Stone),
            Tool::Shovel(ToolMaterial::Golden),
            Tool::Shovel(ToolMaterial::Iron),
            Tool::Shovel(ToolMaterial::Diamond),
            Tool::Shovel(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Shovel(_), ],
    }
    Ice {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "ice") },
        hardness 0.5,
        best_tools [ Tool::Pickaxe(_), ],
    }
    SnowBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "snow_block") },
        hardness 0.2,
        harvest_tools [
            Tool::Shovel(ToolMaterial::Wooden),
            Tool::Shovel(ToolMaterial::Stone),
            Tool::Shovel(ToolMaterial::Golden),
            Tool::Shovel(ToolMaterial::Iron),
            Tool::Shovel(ToolMaterial::Diamond),
            Tool::Shovel(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Shovel(_), ],
    }
    Cactus {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cactus") },
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.9375, 0.9375)),
            ],
        },
        hardness 0.4,
    }
    Clay {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "clay") },
        hardness 0.6,
        best_tools [ Tool::Shovel(_), ],
    }
    SugarCane {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "sugar_cane") },
        tint TintType::Grass,
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    Jukebox {
        props {
            has_record: bool = [true, false],
        },
        offset if has_record { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jukebox") },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    OakFence {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oak_fence") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            1 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            3 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            5 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            7 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            9 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            11 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            13 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            17 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            21 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            22 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            24 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            25 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            29 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            30 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            31 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
        },
        update_state (world, pos) => {
            let (north, south, west, east) = can_connect_sides(world, pos, &can_connect_fence);
            OakFence { north, south, west, east, waterlogged }
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    Pumpkin {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pumpkin") },
        hardness 1.0,
        best_tools [ Tool::Shears, Tool::Axe(_), ],
    }
    Netherrack {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "netherrack") },
        hardness 0.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    SoulSand {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "soul_sand") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.875, 1.0)),
            ],
        },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    SoulSoil {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "soul_soil") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    Basalt {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "basalt") },
        variant format!("axis={}", axis.as_string()),
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PolishedBasalt {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_basalt") },
        variant format!("axis={}", axis.as_string()),
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    SoulTorch {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 10,
            collidable: false,
        },
        model { ("minecraft", "soul_torch") },
        collision { _ => [], },
        hardness 0.0,
    }
    SoulWallTorch {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 10,
            collidable: false,
        },
        model { ("minecraft", "soul_wall_torch") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
    }
    Glowstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "glowstone") },
        hardness 0.3,
    }
    NetherPortal {
        props {
            axis: Axis = [Axis::X, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Z => 1,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 11,
            collidable: false,
        },
        model { ("minecraft", "nether_portal") },
        variant format!("axis={}", axis.as_string()),
        collision { _ => [], },
    }
    CarvedPumpkin {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "carved_pumpkin") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.0,
        best_tools [ Tool::Shears, Tool::Axe(_), ],
    }
    JackOLantern {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "jack_o_lantern") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.0,
        best_tools [ Tool::Shears, Tool::Axe(_), ],
    }
    Cake {
        props {
            bites: u8 = [0, 1, 2, 3, 4, 5, 6],
        },
        offset bites as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cake") },
        variant format!("bites={}", bites),
        collision {
            0 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
            ],
            1 => [
                ((0.1875, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
            ],
            2 => [
                ((0.3125, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
            ],
            4 => [
                ((0.5625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
            ],
            5 => [
                ((0.6875, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
            ],
            6 => [
                ((0.8125, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
            ],
        },
        hardness 0.5,
    }
    Repeater {
        props {
            delay: u8 = [1, 2, 3, 4],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            locked: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if locked { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            } +
            (delay as usize - 1) * 16
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "repeater") },
        variant format!("delay={},facing={},locked={},powered={}", delay, facing.as_string(), locked, powered),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.125, 1.0)),
            ],
        },
        update_state (world, pos) => Repeater {
            delay,
            facing,
            locked: update_repeater_state(world, pos, facing),
            powered,
        },
        hardness 0.0,
    }
    WhiteStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_stained_glass") },
        hardness 0.3,
    }
    OrangeStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_stained_glass") },
        hardness 0.3,
    }
    MagentaStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_stained_glass") },
        hardness 0.3,
    }
    LightBlueStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_stained_glass") },
        hardness 0.3,
    }
    YellowStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_stained_glass") },
        hardness 0.3,
    }
    LimeStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_stained_glass") },
        hardness 0.3,
    }
    PinkStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_stained_glass") },
        hardness 0.3,
    }
    GrayStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_stained_glass") },
        hardness 0.3,
    }
    LightGrayStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_stained_glass") },
        hardness 0.3,
    }
    CyanStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_stained_glass") },
        hardness 0.3,
    }
    PurpleStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_stained_glass") },
        hardness 0.3,
    }
    BlueStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_stained_glass") },
        hardness 0.3,
    }
    BrownStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_stained_glass") },
        hardness 0.3,
    }
    GreenStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_stained_glass") },
        hardness 0.3,
    }
    RedStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_stained_glass") },
        hardness 0.3,
    }
    BlackStainedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_stained_glass") },
        hardness 0.3,
    }
    OakTrapdoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            open: bool = [true, false],
            powered: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if powered { 0 } else { 2 } +
            if open { 0 } else { 4 } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 8,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oak_trapdoor") },
        variant format!("facing={},half={},open={}", facing.as_string(), half.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            23 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            32 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    SpruceTrapdoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            open: bool = [true, false],
            powered: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if powered { 0 } else { 2 } +
            if open { 0 } else { 4 } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 8,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "spruce_trapdoor") },
        variant format!("facing={},half={},open={}", facing.as_string(), half.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            23 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            32 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    BirchTrapdoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            open: bool = [true, false],
            powered: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if powered { 0 } else { 2 } +
            if open { 0 } else { 4 } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 8,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "birch_trapdoor") },
        variant format!("facing={},half={},open={}", facing.as_string(), half.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            23 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            32 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    JungleTrapdoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            open: bool = [true, false],
            powered: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if powered { 0 } else { 2 } +
            if open { 0 } else { 4 } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 8,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jungle_trapdoor") },
        variant format!("facing={},half={},open={}", facing.as_string(), half.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            23 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            32 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    AcaciaTrapdoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            open: bool = [true, false],
            powered: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if powered { 0 } else { 2 } +
            if open { 0 } else { 4 } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 8,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "acacia_trapdoor") },
        variant format!("facing={},half={},open={}", facing.as_string(), half.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            23 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            32 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    DarkOakTrapdoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            open: bool = [true, false],
            powered: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if powered { 0 } else { 2 } +
            if open { 0 } else { 4 } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 8,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_oak_trapdoor") },
        variant format!("facing={},half={},open={}", facing.as_string(), half.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            23 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            32 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    MangroveTrapdoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            open: bool = [true, false],
            powered: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if powered { 0 } else { 2 } +
            if open { 0 } else { 4 } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 8,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mangrove_trapdoor") },
        variant format!("facing={},half={},open={}", facing.as_string(), half.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            23 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            32 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    StoneBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stone_bricks") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    MossyStoneBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mossy_stone_bricks") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CrackedStoneBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cracked_stone_bricks") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    ChiseledStoneBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chiseled_stone_bricks") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PackedMud {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "packed_mud") },
        hardness 1.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    MudBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mud_bricks") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    InfestedStone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "infested_stone") },
        hardness 0.75,
        best_tools [ Tool::Pickaxe(_), ],
    }
    InfestedCobblestone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "infested_cobblestone") },
        hardness 1.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    InfestedStoneBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "infested_stone_bricks") },
        hardness 0.75,
        best_tools [ Tool::Pickaxe(_), ],
    }
    InfestedMossyStoneBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "infested_mossy_stone_bricks") },
        hardness 0.75,
        best_tools [ Tool::Pickaxe(_), ],
    }
    InfestedCrackedStoneBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "infested_cracked_stone_bricks") },
        hardness 0.75,
        best_tools [ Tool::Pickaxe(_), ],
    }
    InfestedChiseledStoneBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "infested_chiseled_stone_bricks") },
        hardness 0.75,
        best_tools [ Tool::Pickaxe(_), ],
    }
    BrownMushroomBlock {
        props {
            down: bool = [true, false],
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            up: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if up { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 } +
            if down { 0 } else { 32 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_mushroom_block") },
        multipart (key, val) => match key {
            "down" => val.contains(&down.to_string()),
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "up" => val.contains(&up.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        hardness 0.2,
        best_tools [ Tool::Axe(_), ],
    }
    RedMushroomBlock {
        props {
            down: bool = [true, false],
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            up: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if up { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 } +
            if down { 0 } else { 32 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_mushroom_block") },
        multipart (key, val) => match key {
            "down" => val.contains(&down.to_string()),
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "up" => val.contains(&up.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        hardness 0.2,
        best_tools [ Tool::Axe(_), ],
    }
    MushroomStem {
        props {
            down: bool = [true, false],
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            up: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if up { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 } +
            if down { 0 } else { 32 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mushroom_stem") },
        multipart (key, val) => match key {
            "down" => val.contains(&down.to_string()),
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "up" => val.contains(&up.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        hardness 0.2,
        best_tools [ Tool::Axe(_), ],
    }
    IronBars {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "iron_bars") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let f = |block| matches!(block, IronBars { .. });
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &f);
            if !north && !south && !west && !east {{
                (north, south, west, east) = (true, true, true, true);
            }}
            IronBars { north, south, west, east, waterlogged }
        },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    Chain {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match axis {
                Axis::X => 0,
                Axis::Y => 2,
                Axis::Z => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chain") },
        variant format!("axis={}", axis.as_string()),
        collision {
            0 => [
                ((0.0, 0.40625, 0.40625), (1.0, 0.59375, 0.59375)),
            ],
            1 => [
                ((0.0, 0.40625, 0.40625), (1.0, 0.59375, 0.59375)),
            ],
            2 => [
                ((0.40625, 0.0, 0.40625), (0.59375, 1.0, 0.59375)),
            ],
            3 => [
                ((0.40625, 0.0, 0.40625), (0.59375, 1.0, 0.59375)),
            ],
            4 => [
                ((0.40625, 0.40625, 0.0), (0.59375, 0.59375, 1.0)),
            ],
            5 => [
                ((0.40625, 0.40625, 0.0), (0.59375, 0.59375, 1.0)),
            ],
        },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    GlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            GlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    Melon {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "melon") },
        hardness 1.0,
        best_tools [ Tool::Shears, Tool::Axe(_), ],
    }
    AttachedPumpkinStem {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "attached_pumpkin_stem") },
        variant format!("facing={}", facing.as_string()),
        tint TintType::Color { r: 224, g: 199, b: 28 },
        collision { _ => [], },
        update_state (world, pos) => {
            let facing = match (
                world.get_block(pos.shift(Direction::North)),
                world.get_block(pos.shift(Direction::East)),
                world.get_block(pos.shift(Direction::South)),
                world.get_block(pos.shift(Direction::West)),
            ) {
                (CarvedPumpkin { .. }, _, _, _) => Direction::North,
                (_, CarvedPumpkin { .. }, _, _) => Direction::East,
                (_, _, CarvedPumpkin { .. }, _) => Direction::South,
                (_, _, _, CarvedPumpkin { .. }) => Direction::West,
                _ => return PumpkinStem { age: 7 }
            };

            AttachedPumpkinStem { facing }
        },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    AttachedMelonStem {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "attached_melon_stem") },
        variant format!("facing={}", facing.as_string()),
        tint TintType::Color { r: 224, g: 199, b: 28 },
        collision { _ => [], },
        update_state (world, pos) => {
            let facing = match (
                world.get_block(pos.shift(Direction::North)),
                world.get_block(pos.shift(Direction::East)),
                world.get_block(pos.shift(Direction::South)),
                world.get_block(pos.shift(Direction::West)),
            ) {
                (Melon { .. }, _, _, _) => Direction::North,
                (_, Melon { .. }, _, _) => Direction::East,
                (_, _, Melon { .. }, _) => Direction::South,
                (_, _, _, Melon { .. }) => Direction::West,
                _ => return MelonStem { age: 7 }
            };

            AttachedMelonStem { facing }
        },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    PumpkinStem {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "pumpkin_stem") },
        variant format!("age={}", age),
        tint TintType::Color { r: 0, g: 255, b: 0 },
        collision { _ => [], },
        update_state (world, pos) => {
            let facing = match (
                world.get_block(pos.shift(Direction::North)),
                world.get_block(pos.shift(Direction::East)),
                world.get_block(pos.shift(Direction::South)),
                world.get_block(pos.shift(Direction::West)),
            ) {
                (CarvedPumpkin { .. }, _, _, _) => Direction::North,
                (_, CarvedPumpkin { .. }, _, _) => Direction::East,
                (_, _, CarvedPumpkin { .. }, _) => Direction::South,
                (_, _, _, CarvedPumpkin { .. }) => Direction::West,
                _ => return PumpkinStem { age }
            };

            AttachedPumpkinStem { facing }
        },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    MelonStem {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "melon_stem") },
        variant format!("age={}", age),
        tint TintType::Color { r: 0, g: 255, b: 0 },
        collision { _ => [], },
        update_state (world, pos) => {
            let facing = match (
                world.get_block(pos.shift(Direction::North)),
                world.get_block(pos.shift(Direction::East)),
                world.get_block(pos.shift(Direction::South)),
                world.get_block(pos.shift(Direction::West)),
            ) {
                (Melon { .. }, _, _, _) => Direction::North,
                (_, Melon { .. }, _, _) => Direction::East,
                (_, _, Melon { .. }, _) => Direction::South,
                (_, _, _, Melon { .. }) => Direction::West,
                _ => return MelonStem { age }
            };

            AttachedMelonStem { facing }
        },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    Vine {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            up: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if up { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "vine") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "up" => val.contains(&up.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        tint TintType::Foliage,
        collision { _ => [], },
        update_state (world, pos) => {
            let mat = world.get_block(pos.shift(Direction::Up)).get_material();
            let up = mat.renderable && (mat.should_cull_against || mat.never_cull /* Because leaves */);
            Vine { up, south, west, north, east }
        },
        hardness 0.2,
        best_tools [ Tool::Axe(_), ],
    }
    GlowLichen {
        props {
            down: bool = [true, false],
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if up { 0 } else { 4 } +
            if south { 0 } else { 8 } +
            if north { 0 } else { 16 } +
            if east { 0 } else { 32 } +
            if down { 0 } else { 64 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "glow_lichen") },
        multipart (key, val) => match key {
            "down" => val.contains(&down.to_string()),
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision { _ => [], },
        hardness 0.2,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    OakFenceGate {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            in_wall: bool = [true, false],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            if in_wall { 0 } else { 4 } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oak_fence_gate") },
        variant format!("facing={},in_wall={},open={}", facing.as_string(), in_wall, open),
        collision {
            0 => [
            ],
            1 => [
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            3 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
            ],
            5 => [
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            7 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            11 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
            ],
            13 => [
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
            ],
            17 => [
            ],
            18 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
            ],
            21 => [
            ],
            22 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            24 => [
            ],
            25 => [
            ],
            26 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            28 => [
            ],
            29 => [
            ],
            30 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            31 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
        },
        update_state (world, pos) => OakFenceGate {
            facing,
            in_wall: fence_gate_update_state(world, pos, facing),
            open,
            powered,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    BrickStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brick_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => BrickStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    StoneBrickStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stone_brick_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => StoneBrickStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    MudBrickStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mud_brick_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    Mycelium {
        props {
            snowy: bool = [true, false],
        },
        offset if snowy { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mycelium") },
        variant format!("snowy={}", snowy),
        update_state (world, pos) => Mycelium { snowy: is_snowy(world, pos) },
        hardness 0.6,
        best_tools [ Tool::Shovel(_), ],
    }
    LilyPad {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lily_pad") },
        tint TintType::Color { r: 32, g: 128, b: 48 },
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.09375, 0.9375)),
            ],
        },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    NetherBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "nether_bricks") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    NetherBrickFence {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "nether_brick_fence") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            1 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            3 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            5 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            7 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            9 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            11 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            13 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            17 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            21 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            22 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            24 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            25 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            29 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            30 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            31 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
        },
        update_state (world, pos) => {
            let f = |block| matches!(block, NetherBrickFence { .. } |
                OakFenceGate { .. } |
                SpruceFenceGate { .. } |
                BirchFenceGate { .. } |
                JungleFenceGate { .. } |
                DarkOakFenceGate { .. } |
                AcaciaFenceGate { .. });

            let (north, south, west, east) = can_connect_sides(world, pos, &f);
            NetherBrickFence { north, south, west, east, waterlogged }
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    NetherBrickStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "nether_brick_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => NetherBrickStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    NetherWart {
        props {
            age: u8 = [0, 1, 2, 3],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "nether_wart") },
        variant format!("age={}", age),
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    EnchantingTable {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 7,
            collidable: true,
        },
        model { ("minecraft", "enchanting_table") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.75, 1.0)),
            ],
        },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BrewingStand {
        props {
            has_bottle_0: bool = [true, false],
            has_bottle_1: bool = [true, false],
            has_bottle_2: bool = [true, false],
        },
        offset (
            if has_bottle_2 { 0 } else { 1 } +
            if has_bottle_1 { 0 } else { 2 } +
            if has_bottle_0 { 0 } else { 4 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 1,
            collidable: true,
        },
        model { ("minecraft", "brewing_stand") },
        multipart (key, val) => match key {
            "has_bottle_0" => val.contains(&has_bottle_0.to_string()),
            "has_bottle_1" => val.contains(&has_bottle_1.to_string()),
            "has_bottle_2" => val.contains(&has_bottle_2.to_string()),
            _ => false,
        },
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.125, 0.9375)),
                ((0.4375, 0.125, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Cauldron {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cauldron") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (0.125, 1.0, 0.25)),
                ((0.0, 0.0, 0.75), (0.125, 1.0, 1.0)),
                ((0.125, 0.0, 0.0), (0.25, 1.0, 0.125)),
                ((0.125, 0.0, 0.875), (0.25, 1.0, 1.0)),
                ((0.75, 0.0, 0.0), (1.0, 1.0, 0.125)),
                ((0.75, 0.0, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.0, 0.125), (1.0, 1.0, 0.25)),
                ((0.875, 0.0, 0.75), (1.0, 1.0, 0.875)),
                ((0.0, 0.1875, 0.25), (1.0, 0.25, 0.75)),
                ((0.125, 0.1875, 0.125), (0.875, 0.25, 0.25)),
                ((0.125, 0.1875, 0.75), (0.875, 0.25, 0.875)),
                ((0.25, 0.1875, 0.0), (0.75, 1.0, 0.125)),
                ((0.25, 0.1875, 0.875), (0.75, 1.0, 1.0)),
                ((0.0, 0.25, 0.25), (0.125, 1.0, 0.75)),
                ((0.875, 0.25, 0.25), (1.0, 1.0, 0.75)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WaterCauldron {
        props {
            level: u8 = [1, 2, 3],
        },
        offset (level as usize - 1),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "water_cauldron") },
        variant format!("level={}", level),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (0.125, 1.0, 0.25)),
                ((0.0, 0.0, 0.75), (0.125, 1.0, 1.0)),
                ((0.125, 0.0, 0.0), (0.25, 1.0, 0.125)),
                ((0.125, 0.0, 0.875), (0.25, 1.0, 1.0)),
                ((0.75, 0.0, 0.0), (1.0, 1.0, 0.125)),
                ((0.75, 0.0, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.0, 0.125), (1.0, 1.0, 0.25)),
                ((0.875, 0.0, 0.75), (1.0, 1.0, 0.875)),
                ((0.0, 0.1875, 0.25), (1.0, 0.25, 0.75)),
                ((0.125, 0.1875, 0.125), (0.875, 0.25, 0.25)),
                ((0.125, 0.1875, 0.75), (0.875, 0.25, 0.875)),
                ((0.25, 0.1875, 0.0), (0.75, 1.0, 0.125)),
                ((0.25, 0.1875, 0.875), (0.75, 1.0, 1.0)),
                ((0.0, 0.25, 0.25), (0.125, 1.0, 0.75)),
                ((0.875, 0.25, 0.25), (1.0, 1.0, 0.75)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    LavaCauldron {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "lava_cauldron") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (0.125, 1.0, 0.25)),
                ((0.0, 0.0, 0.75), (0.125, 1.0, 1.0)),
                ((0.125, 0.0, 0.0), (0.25, 1.0, 0.125)),
                ((0.125, 0.0, 0.875), (0.25, 1.0, 1.0)),
                ((0.75, 0.0, 0.0), (1.0, 1.0, 0.125)),
                ((0.75, 0.0, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.0, 0.125), (1.0, 1.0, 0.25)),
                ((0.875, 0.0, 0.75), (1.0, 1.0, 0.875)),
                ((0.0, 0.1875, 0.25), (1.0, 0.25, 0.75)),
                ((0.125, 0.1875, 0.125), (0.875, 0.25, 0.25)),
                ((0.125, 0.1875, 0.75), (0.875, 0.25, 0.875)),
                ((0.25, 0.1875, 0.0), (0.75, 1.0, 0.125)),
                ((0.25, 0.1875, 0.875), (0.75, 1.0, 1.0)),
                ((0.0, 0.25, 0.25), (0.125, 1.0, 0.75)),
                ((0.875, 0.25, 0.25), (1.0, 1.0, 0.75)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PowderSnowCauldron {
        props {
            level: u8 = [1, 2, 3],
        },
        offset (level as usize - 1),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "powder_snow_cauldron") },
        variant format!("level={}", level),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (0.125, 1.0, 0.25)),
                ((0.0, 0.0, 0.75), (0.125, 1.0, 1.0)),
                ((0.125, 0.0, 0.0), (0.25, 1.0, 0.125)),
                ((0.125, 0.0, 0.875), (0.25, 1.0, 1.0)),
                ((0.75, 0.0, 0.0), (1.0, 1.0, 0.125)),
                ((0.75, 0.0, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.0, 0.125), (1.0, 1.0, 0.25)),
                ((0.875, 0.0, 0.75), (1.0, 1.0, 0.875)),
                ((0.0, 0.1875, 0.25), (1.0, 0.25, 0.75)),
                ((0.125, 0.1875, 0.125), (0.875, 0.25, 0.25)),
                ((0.125, 0.1875, 0.75), (0.875, 0.25, 0.875)),
                ((0.25, 0.1875, 0.0), (0.75, 1.0, 0.125)),
                ((0.25, 0.1875, 0.875), (0.75, 1.0, 1.0)),
                ((0.0, 0.25, 0.25), (0.125, 1.0, 0.75)),
                ((0.875, 0.25, 0.25), (1.0, 1.0, 0.75)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    EndPortal {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 15,
            collidable: false,
        },
        model { ("minecraft", "end_portal") },
        collision { _ => [], },
    }
    EndPortalFrame {
        props {
            eye: bool = [true, false],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset (
            match facing {
                Direction::North => 0,
                Direction::South => 1,
                Direction::West => 2,
                Direction::East => 3,
                _ => unreachable!(),
            } +
            if eye { 0 } else { 4 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 1,
            collidable: true,
        },
        model { ("minecraft", "end_portal_frame") },
        variant format!("eye={},facing={}", eye, facing.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 0.8125, 1.0)),
                ((0.25, 0.8125, 0.25), (0.75, 1.0, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 0.8125, 1.0)),
                ((0.25, 0.8125, 0.25), (0.75, 1.0, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.8125, 1.0)),
                ((0.25, 0.8125, 0.25), (0.75, 1.0, 0.75)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.8125, 1.0)),
                ((0.25, 0.8125, 0.25), (0.75, 1.0, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 0.8125, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 0.8125, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (1.0, 0.8125, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (1.0, 0.8125, 1.0)),
            ],
        },
    }
    EndStone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "end_stone") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DragonEgg {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 1,
            collidable: true,
        },
        model { ("minecraft", "dragon_egg") },
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 1.0, 0.9375)),
            ],
        },
        hardness 3.0,
    }
    RedstoneLamp {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "redstone_lamp") },
        variant format!("lit={}", lit),
        hardness 0.3,
    }
    Cocoa {
        props {
            age: u8 = [0, 1, 2],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset (
            match facing {
                Direction::North => 0,
                Direction::South => 1,
                Direction::West => 2,
                Direction::East => 3,
                _ => unreachable!(),
            } +
            age as usize * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cocoa") },
        variant format!("age={},facing={}", age, facing.as_string()),
        collision {
            0 => [
                ((0.375, 0.4375, 0.0625), (0.625, 0.75, 0.3125)),
            ],
            1 => [
                ((0.375, 0.4375, 0.6875), (0.625, 0.75, 0.9375)),
            ],
            2 => [
                ((0.0625, 0.4375, 0.375), (0.3125, 0.75, 0.625)),
            ],
            3 => [
                ((0.6875, 0.4375, 0.375), (0.9375, 0.75, 0.625)),
            ],
            4 => [
                ((0.3125, 0.3125, 0.0625), (0.6875, 0.75, 0.4375)),
            ],
            5 => [
                ((0.3125, 0.3125, 0.5625), (0.6875, 0.75, 0.9375)),
            ],
            6 => [
                ((0.0625, 0.3125, 0.3125), (0.4375, 0.75, 0.6875)),
            ],
            7 => [
                ((0.5625, 0.3125, 0.3125), (0.9375, 0.75, 0.6875)),
            ],
            8 => [
                ((0.25, 0.1875, 0.0625), (0.75, 0.75, 0.5625)),
            ],
            9 => [
                ((0.25, 0.1875, 0.4375), (0.75, 0.75, 0.9375)),
            ],
            10 => [
                ((0.0625, 0.1875, 0.25), (0.5625, 0.75, 0.75)),
            ],
            11 => [
                ((0.4375, 0.1875, 0.25), (0.9375, 0.75, 0.75)),
            ],
        },
        hardness 0.2,
        best_tools [ Tool::Axe(_), ],
    }
    SandstoneStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "sandstone_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => SandstoneStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    EmeraldOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "emerald_ore") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeepslateEmeraldOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_emerald_ore") },
        hardness 4.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    EnderChest {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 7,
            collidable: true,
        },
        model { ("minecraft", "ender_chest") },
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
        },
        hardness 22.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    TripwireHook {
        props {
            attached: bool = [true, false],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            if attached { 0 } else { 8 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "tripwire_hook") },
        variant format!("attached={},facing={},powered={}", attached, facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.0,
    }
    Tripwire {
        props {
            attached: bool = [true, false],
            disarmed: bool = [true, false],
            east: bool = [true, false],
            north: bool = [true, false],
            powered: bool = [true, false],
            south: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if south { 0 } else { 2 } +
            if powered { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 } +
            if disarmed { 0 } else { 32 } +
            if attached { 0 } else { 64 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "tripwire") },
        variant format!("attached={},east={},north={},south={},west={}", attached, east, north, south, west),
        collision { _ => [], },
        update_state (world, pos) => {
            let f = |dir| {
                match world.get_block(pos.shift(dir)) {
                    TripwireHook { facing, .. } => facing.opposite() == dir,
                    Tripwire { .. } => true,
                    _ => false,
                }
            };

            Tripwire {
                powered,
                attached,
                disarmed,
                east: f(Direction::East),
                north: f(Direction::North),
                south: f(Direction::South),
                west: f(Direction::West),
            }
        },
        hardness 0.0,
    }
    EmeraldBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "emerald_block") },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    SpruceStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "spruce_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => SpruceStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    BirchStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "birch_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => BirchStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    JungleStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jungle_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => JungleStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    CommandBlock {
        props {
            conditional: bool = [true, false],
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset (
            match facing {
                Direction::North => 0,
                Direction::East => 1,
                Direction::South => 2,
                Direction::West => 3,
                Direction::Up => 4,
                Direction::Down => 5,
                _ => unreachable!(),
            } +
            if conditional { 0 } else { 6 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "command_block") },
        variant format!("conditional={},facing={}", conditional, facing.as_string()),
    }
    Beacon {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "beacon") },
        hardness 3.0,
    }
    CobblestoneWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cobblestone_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        update_state (world, pos) => {
            let (up, north, south, west, east) = update_wall_state(world, pos);
            CobblestoneWall { up, north, south, west, east, waterlogged }
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    MossyCobblestoneWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mossy_cobblestone_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        update_state (world, pos) => {
            let (up, north, south, west, east) = update_wall_state(world, pos);
            MossyCobblestoneWall { up, north, south, west, east, waterlogged }
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    FlowerPot {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "flower_pot") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedOakSapling {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_oak_sapling") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedSpruceSapling {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_spruce_sapling") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedBirchSapling {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_birch_sapling") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedJungleSapling {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_jungle_sapling") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedAcaciaSapling {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_acacia_sapling") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedDarkOakSapling {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_dark_oak_sapling") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedMangrovePropagule {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_mangrove_propagule") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedFern {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_fern") },
        tint TintType::Grass,
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedDandelion {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_dandelion") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedPoppy {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_poppy") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedBlueOrchid {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_blue_orchid") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedAllium {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_allium") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedAzureBluet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_azure_bluet") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedRedTulip {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_red_tulip") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedOrangeTulip {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_orange_tulip") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedWhiteTulip {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_white_tulip") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedPinkTulip {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_pink_tulip") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedOxeyeDaisy {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_oxeye_daisy") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedCornflower {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_cornflower") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedLilyOfTheValley {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_lily_of_the_valley") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedWitherRose {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_wither_rose") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedRedMushroom {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_red_mushroom") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedBrownMushroom {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_brown_mushroom") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedDeadBush {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_dead_bush") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedCactus {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_cactus") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    Carrots {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "carrots") },
        variant format!("age={}", age),
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    Potatoes {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "potatoes") },
        variant format!("age={}", age),
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    OakButton {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "oak_button") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    SpruceButton {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "spruce_button") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    BirchButton {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "birch_button") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    JungleButton {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "jungle_button") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    AcaciaButton {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "acacia_button") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    DarkOakButton {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dark_oak_button") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    MangroveButton {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "mangrove_button") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    SkeletonSkull {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "skeleton_skull") },
        collision {
            _ => [
                ((0.25, 0.0, 0.25), (0.75, 0.5, 0.75)),
            ],
        },
        hardness 1.0,
    }
    SkeletonWallSkull {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "skeleton_wall_skull") },
        collision {
            0 => [
                ((0.25, 0.25, 0.5), (0.75, 0.75, 1.0)),
            ],
            1 => [
                ((0.25, 0.25, 0.0), (0.75, 0.75, 0.5)),
            ],
            2 => [
                ((0.5, 0.25, 0.25), (1.0, 0.75, 0.75)),
            ],
            3 => [
                ((0.0, 0.25, 0.25), (0.5, 0.75, 0.75)),
            ],
        },
        hardness 1.0,
    }
    WitherSkeletonSkull {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "wither_skeleton_skull") },
        collision {
            _ => [
                ((0.25, 0.0, 0.25), (0.75, 0.5, 0.75)),
            ],
        },
        hardness 1.0,
    }
    WitherSkeletonWallSkull {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "wither_skeleton_wall_skull") },
        collision {
            0 => [
                ((0.25, 0.25, 0.5), (0.75, 0.75, 1.0)),
            ],
            1 => [
                ((0.25, 0.25, 0.0), (0.75, 0.75, 0.5)),
            ],
            2 => [
                ((0.5, 0.25, 0.25), (1.0, 0.75, 0.75)),
            ],
            3 => [
                ((0.0, 0.25, 0.25), (0.5, 0.75, 0.75)),
            ],
        },
        hardness 1.0,
    }
    ZombieHead {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "zombie_head") },
        collision {
            _ => [
                ((0.25, 0.0, 0.25), (0.75, 0.5, 0.75)),
            ],
        },
        hardness 1.0,
    }
    ZombieWallHead {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "zombie_wall_head") },
        collision {
            0 => [
                ((0.25, 0.25, 0.5), (0.75, 0.75, 1.0)),
            ],
            1 => [
                ((0.25, 0.25, 0.0), (0.75, 0.75, 0.5)),
            ],
            2 => [
                ((0.5, 0.25, 0.25), (1.0, 0.75, 0.75)),
            ],
            3 => [
                ((0.0, 0.25, 0.25), (0.5, 0.75, 0.75)),
            ],
        },
        hardness 1.0,
    }
    PlayerHead {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "player_head") },
        collision {
            _ => [
                ((0.25, 0.0, 0.25), (0.75, 0.5, 0.75)),
            ],
        },
        hardness 1.0,
    }
    PlayerWallHead {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "player_wall_head") },
        collision {
            0 => [
                ((0.25, 0.25, 0.5), (0.75, 0.75, 1.0)),
            ],
            1 => [
                ((0.25, 0.25, 0.0), (0.75, 0.75, 0.5)),
            ],
            2 => [
                ((0.5, 0.25, 0.25), (1.0, 0.75, 0.75)),
            ],
            3 => [
                ((0.0, 0.25, 0.25), (0.5, 0.75, 0.75)),
            ],
        },
        hardness 1.0,
    }
    CreeperHead {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "creeper_head") },
        collision {
            _ => [
                ((0.25, 0.0, 0.25), (0.75, 0.5, 0.75)),
            ],
        },
        hardness 1.0,
    }
    CreeperWallHead {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "creeper_wall_head") },
        collision {
            0 => [
                ((0.25, 0.25, 0.5), (0.75, 0.75, 1.0)),
            ],
            1 => [
                ((0.25, 0.25, 0.0), (0.75, 0.75, 0.5)),
            ],
            2 => [
                ((0.5, 0.25, 0.25), (1.0, 0.75, 0.75)),
            ],
            3 => [
                ((0.0, 0.25, 0.25), (0.5, 0.75, 0.75)),
            ],
        },
        hardness 1.0,
    }
    DragonHead {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dragon_head") },
        collision {
            _ => [
                ((0.25, 0.0, 0.25), (0.75, 0.5, 0.75)),
            ],
        },
        hardness 1.0,
    }
    DragonWallHead {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dragon_wall_head") },
        collision {
            0 => [
                ((0.25, 0.25, 0.5), (0.75, 0.75, 1.0)),
            ],
            1 => [
                ((0.25, 0.25, 0.0), (0.75, 0.75, 0.5)),
            ],
            2 => [
                ((0.5, 0.25, 0.25), (1.0, 0.75, 0.75)),
            ],
            3 => [
                ((0.0, 0.25, 0.25), (0.5, 0.75, 0.75)),
            ],
        },
        hardness 1.0,
    }
    Anvil {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "anvil") },
        variant format!("facing={}", facing.as_string()),
        collision {
            0 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.25, 0.25, 0.1875), (0.75, 0.3125, 0.8125)),
                ((0.375, 0.3125, 0.25), (0.625, 1.0, 0.75)),
                ((0.1875, 0.625, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.625, 0.0), (0.8125, 1.0, 0.25)),
                ((0.375, 0.625, 0.75), (0.8125, 1.0, 1.0)),
                ((0.625, 0.625, 0.25), (0.8125, 1.0, 0.75)),
            ],
            1 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.25, 0.25, 0.1875), (0.75, 0.3125, 0.8125)),
                ((0.375, 0.3125, 0.25), (0.625, 1.0, 0.75)),
                ((0.1875, 0.625, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.625, 0.0), (0.8125, 1.0, 0.25)),
                ((0.375, 0.625, 0.75), (0.8125, 1.0, 1.0)),
                ((0.625, 0.625, 0.25), (0.8125, 1.0, 0.75)),
            ],
            2 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.1875, 0.25, 0.25), (0.8125, 0.3125, 0.75)),
                ((0.25, 0.3125, 0.375), (0.75, 1.0, 0.625)),
                ((0.0, 0.625, 0.1875), (0.25, 1.0, 0.8125)),
                ((0.25, 0.625, 0.1875), (1.0, 1.0, 0.375)),
                ((0.25, 0.625, 0.625), (1.0, 1.0, 0.8125)),
                ((0.75, 0.625, 0.375), (1.0, 1.0, 0.625)),
            ],
            3 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.1875, 0.25, 0.25), (0.8125, 0.3125, 0.75)),
                ((0.25, 0.3125, 0.375), (0.75, 1.0, 0.625)),
                ((0.0, 0.625, 0.1875), (0.25, 1.0, 0.8125)),
                ((0.25, 0.625, 0.1875), (1.0, 1.0, 0.375)),
                ((0.25, 0.625, 0.625), (1.0, 1.0, 0.8125)),
                ((0.75, 0.625, 0.375), (1.0, 1.0, 0.625)),
            ],
        },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    ChippedAnvil {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chipped_anvil") },
        variant format!("facing={}", facing.as_string()),
        collision {
            0 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.25, 0.25, 0.1875), (0.75, 0.3125, 0.8125)),
                ((0.375, 0.3125, 0.25), (0.625, 1.0, 0.75)),
                ((0.1875, 0.625, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.625, 0.0), (0.8125, 1.0, 0.25)),
                ((0.375, 0.625, 0.75), (0.8125, 1.0, 1.0)),
                ((0.625, 0.625, 0.25), (0.8125, 1.0, 0.75)),
            ],
            1 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.25, 0.25, 0.1875), (0.75, 0.3125, 0.8125)),
                ((0.375, 0.3125, 0.25), (0.625, 1.0, 0.75)),
                ((0.1875, 0.625, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.625, 0.0), (0.8125, 1.0, 0.25)),
                ((0.375, 0.625, 0.75), (0.8125, 1.0, 1.0)),
                ((0.625, 0.625, 0.25), (0.8125, 1.0, 0.75)),
            ],
            2 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.1875, 0.25, 0.25), (0.8125, 0.3125, 0.75)),
                ((0.25, 0.3125, 0.375), (0.75, 1.0, 0.625)),
                ((0.0, 0.625, 0.1875), (0.25, 1.0, 0.8125)),
                ((0.25, 0.625, 0.1875), (1.0, 1.0, 0.375)),
                ((0.25, 0.625, 0.625), (1.0, 1.0, 0.8125)),
                ((0.75, 0.625, 0.375), (1.0, 1.0, 0.625)),
            ],
            3 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.1875, 0.25, 0.25), (0.8125, 0.3125, 0.75)),
                ((0.25, 0.3125, 0.375), (0.75, 1.0, 0.625)),
                ((0.0, 0.625, 0.1875), (0.25, 1.0, 0.8125)),
                ((0.25, 0.625, 0.1875), (1.0, 1.0, 0.375)),
                ((0.25, 0.625, 0.625), (1.0, 1.0, 0.8125)),
                ((0.75, 0.625, 0.375), (1.0, 1.0, 0.625)),
            ],
        },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DamagedAnvil {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "damaged_anvil") },
        variant format!("facing={}", facing.as_string()),
        collision {
            0 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.25, 0.25, 0.1875), (0.75, 0.3125, 0.8125)),
                ((0.375, 0.3125, 0.25), (0.625, 1.0, 0.75)),
                ((0.1875, 0.625, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.625, 0.0), (0.8125, 1.0, 0.25)),
                ((0.375, 0.625, 0.75), (0.8125, 1.0, 1.0)),
                ((0.625, 0.625, 0.25), (0.8125, 1.0, 0.75)),
            ],
            1 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.25, 0.25, 0.1875), (0.75, 0.3125, 0.8125)),
                ((0.375, 0.3125, 0.25), (0.625, 1.0, 0.75)),
                ((0.1875, 0.625, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.625, 0.0), (0.8125, 1.0, 0.25)),
                ((0.375, 0.625, 0.75), (0.8125, 1.0, 1.0)),
                ((0.625, 0.625, 0.25), (0.8125, 1.0, 0.75)),
            ],
            2 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.1875, 0.25, 0.25), (0.8125, 0.3125, 0.75)),
                ((0.25, 0.3125, 0.375), (0.75, 1.0, 0.625)),
                ((0.0, 0.625, 0.1875), (0.25, 1.0, 0.8125)),
                ((0.25, 0.625, 0.1875), (1.0, 1.0, 0.375)),
                ((0.25, 0.625, 0.625), (1.0, 1.0, 0.8125)),
                ((0.75, 0.625, 0.375), (1.0, 1.0, 0.625)),
            ],
            3 => [
                ((0.125, 0.0, 0.125), (0.875, 0.25, 0.875)),
                ((0.1875, 0.25, 0.25), (0.8125, 0.3125, 0.75)),
                ((0.25, 0.3125, 0.375), (0.75, 1.0, 0.625)),
                ((0.0, 0.625, 0.1875), (0.25, 1.0, 0.8125)),
                ((0.25, 0.625, 0.1875), (1.0, 1.0, 0.375)),
                ((0.25, 0.625, 0.625), (1.0, 1.0, 0.8125)),
                ((0.75, 0.625, 0.375), (1.0, 1.0, 0.625)),
            ],
        },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    TrappedChest {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            type_: ChestType = [ChestType::Single, ChestType::Left, ChestType::Right],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                ChestType::Single => 0,
                ChestType::Left => 2,
                ChestType::Right => 4,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 6,
                Direction::West => 12,
                Direction::East => 18,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "trapped_chest") },
        collision {
            0 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            1 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            2 => [
                ((0.0625, 0.0, 0.0625), (1.0, 0.875, 0.9375)),
            ],
            3 => [
                ((0.0625, 0.0, 0.0625), (1.0, 0.875, 0.9375)),
            ],
            4 => [
                ((0.0, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            5 => [
                ((0.0, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            6 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            7 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            8 => [
                ((0.0, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            9 => [
                ((0.0, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            10 => [
                ((0.0625, 0.0, 0.0625), (1.0, 0.875, 0.9375)),
            ],
            11 => [
                ((0.0625, 0.0, 0.0625), (1.0, 0.875, 0.9375)),
            ],
            12 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            13 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            14 => [
                ((0.0625, 0.0, 0.0), (0.9375, 0.875, 0.9375)),
            ],
            15 => [
                ((0.0625, 0.0, 0.0), (0.9375, 0.875, 0.9375)),
            ],
            16 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 1.0)),
            ],
            17 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 1.0)),
            ],
            18 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            19 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 0.9375)),
            ],
            20 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 1.0)),
            ],
            21 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.875, 1.0)),
            ],
            22 => [
                ((0.0625, 0.0, 0.0), (0.9375, 0.875, 0.9375)),
            ],
            23 => [
                ((0.0625, 0.0, 0.0), (0.9375, 0.875, 0.9375)),
            ],
        },
        hardness 2.5,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    LightWeightedPressurePlate {
        props {
            power: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset power as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "light_weighted_pressure_plate") },
        variant format!("power={}", power),
        collision { _ => [], },
        hardness 0.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    HeavyWeightedPressurePlate {
        props {
            power: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset power as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "heavy_weighted_pressure_plate") },
        variant format!("power={}", power),
        collision { _ => [], },
        hardness 0.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Comparator {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            mode: ComparatorMode = [ComparatorMode::Compare, ComparatorMode::Subtract],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match mode {
                ComparatorMode::Compare => 0,
                ComparatorMode::Subtract => 2,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "comparator") },
        variant format!("facing={},mode={},powered={}", facing.as_string(), mode.as_string(), powered),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.125, 1.0)),
            ],
        },
        hardness 0.0,
    }
    DaylightDetector {
        props {
            inverted: bool = [true, false],
            power: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset (
            power as usize +
            if inverted { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "daylight_detector") },
        variant format!("inverted={}", inverted),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.375, 1.0)),
            ],
        },
        hardness 0.2,
        best_tools [ Tool::Axe(_), ],
    }
    RedstoneBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "redstone_block") },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    NetherQuartzOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "nether_quartz_ore") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Hopper {
        props {
            enabled: bool = [true, false],
            facing: Direction = [Direction::Down, Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset (
            match facing {
                Direction::Down => 0,
                Direction::North => 1,
                Direction::South => 2,
                Direction::West => 3,
                Direction::East => 4,
                _ => unreachable!(),
            } +
            if enabled { 0 } else { 5 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "hopper") },
        variant format!("facing={}", facing.as_string()),
        collision {
            0 => [
                ((0.375, 0.0, 0.375), (0.625, 0.6875, 0.625)),
                ((0.25, 0.25, 0.25), (0.375, 0.6875, 0.75)),
                ((0.375, 0.25, 0.25), (0.75, 0.6875, 0.375)),
                ((0.375, 0.25, 0.625), (0.75, 0.6875, 0.75)),
                ((0.625, 0.25, 0.375), (0.75, 0.6875, 0.625)),
                ((0.0, 0.625, 0.0), (0.25, 0.6875, 1.0)),
                ((0.25, 0.625, 0.0), (1.0, 0.6875, 0.25)),
                ((0.25, 0.625, 0.75), (1.0, 0.6875, 1.0)),
                ((0.75, 0.625, 0.25), (1.0, 0.6875, 0.75)),
                ((0.0, 0.6875, 0.0), (0.125, 1.0, 1.0)),
                ((0.125, 0.6875, 0.0), (1.0, 1.0, 0.125)),
                ((0.125, 0.6875, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.6875, 0.125), (1.0, 1.0, 0.875)),
            ],
            1 => [
                ((0.25, 0.25, 0.25), (0.75, 0.6875, 0.75)),
                ((0.375, 0.25, 0.0), (0.625, 0.5, 0.25)),
                ((0.0, 0.625, 0.0), (0.25, 0.6875, 1.0)),
                ((0.25, 0.625, 0.0), (1.0, 0.6875, 0.25)),
                ((0.25, 0.625, 0.75), (1.0, 0.6875, 1.0)),
                ((0.75, 0.625, 0.25), (1.0, 0.6875, 0.75)),
                ((0.0, 0.6875, 0.0), (0.125, 1.0, 1.0)),
                ((0.125, 0.6875, 0.0), (1.0, 1.0, 0.125)),
                ((0.125, 0.6875, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.6875, 0.125), (1.0, 1.0, 0.875)),
            ],
            2 => [
                ((0.25, 0.25, 0.25), (0.75, 0.6875, 0.75)),
                ((0.375, 0.25, 0.75), (0.625, 0.5, 1.0)),
                ((0.0, 0.625, 0.0), (0.25, 0.6875, 1.0)),
                ((0.25, 0.625, 0.0), (1.0, 0.6875, 0.25)),
                ((0.25, 0.625, 0.75), (1.0, 0.6875, 1.0)),
                ((0.75, 0.625, 0.25), (1.0, 0.6875, 0.75)),
                ((0.0, 0.6875, 0.0), (0.125, 1.0, 1.0)),
                ((0.125, 0.6875, 0.0), (1.0, 1.0, 0.125)),
                ((0.125, 0.6875, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.6875, 0.125), (1.0, 1.0, 0.875)),
            ],
            3 => [
                ((0.0, 0.25, 0.375), (0.75, 0.5, 0.625)),
                ((0.25, 0.25, 0.25), (0.75, 0.6875, 0.375)),
                ((0.25, 0.25, 0.625), (0.75, 0.6875, 0.75)),
                ((0.25, 0.5, 0.375), (0.75, 0.6875, 0.625)),
                ((0.0, 0.625, 0.0), (0.25, 0.6875, 1.0)),
                ((0.25, 0.625, 0.0), (1.0, 0.6875, 0.25)),
                ((0.25, 0.625, 0.75), (1.0, 0.6875, 1.0)),
                ((0.75, 0.625, 0.25), (1.0, 0.6875, 0.75)),
                ((0.0, 0.6875, 0.0), (0.125, 1.0, 1.0)),
                ((0.125, 0.6875, 0.0), (1.0, 1.0, 0.125)),
                ((0.125, 0.6875, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.6875, 0.125), (1.0, 1.0, 0.875)),
            ],
            4 => [
                ((0.25, 0.25, 0.25), (0.75, 0.6875, 0.75)),
                ((0.75, 0.25, 0.375), (1.0, 0.5, 0.625)),
                ((0.0, 0.625, 0.0), (0.25, 0.6875, 1.0)),
                ((0.25, 0.625, 0.0), (1.0, 0.6875, 0.25)),
                ((0.25, 0.625, 0.75), (1.0, 0.6875, 1.0)),
                ((0.75, 0.625, 0.25), (1.0, 0.6875, 0.75)),
                ((0.0, 0.6875, 0.0), (0.125, 1.0, 1.0)),
                ((0.125, 0.6875, 0.0), (1.0, 1.0, 0.125)),
                ((0.125, 0.6875, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.6875, 0.125), (1.0, 1.0, 0.875)),
            ],
            5 => [
                ((0.375, 0.0, 0.375), (0.625, 0.6875, 0.625)),
                ((0.25, 0.25, 0.25), (0.375, 0.6875, 0.75)),
                ((0.375, 0.25, 0.25), (0.75, 0.6875, 0.375)),
                ((0.375, 0.25, 0.625), (0.75, 0.6875, 0.75)),
                ((0.625, 0.25, 0.375), (0.75, 0.6875, 0.625)),
                ((0.0, 0.625, 0.0), (0.25, 0.6875, 1.0)),
                ((0.25, 0.625, 0.0), (1.0, 0.6875, 0.25)),
                ((0.25, 0.625, 0.75), (1.0, 0.6875, 1.0)),
                ((0.75, 0.625, 0.25), (1.0, 0.6875, 0.75)),
                ((0.0, 0.6875, 0.0), (0.125, 1.0, 1.0)),
                ((0.125, 0.6875, 0.0), (1.0, 1.0, 0.125)),
                ((0.125, 0.6875, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.6875, 0.125), (1.0, 1.0, 0.875)),
            ],
            6 => [
                ((0.25, 0.25, 0.25), (0.75, 0.6875, 0.75)),
                ((0.375, 0.25, 0.0), (0.625, 0.5, 0.25)),
                ((0.0, 0.625, 0.0), (0.25, 0.6875, 1.0)),
                ((0.25, 0.625, 0.0), (1.0, 0.6875, 0.25)),
                ((0.25, 0.625, 0.75), (1.0, 0.6875, 1.0)),
                ((0.75, 0.625, 0.25), (1.0, 0.6875, 0.75)),
                ((0.0, 0.6875, 0.0), (0.125, 1.0, 1.0)),
                ((0.125, 0.6875, 0.0), (1.0, 1.0, 0.125)),
                ((0.125, 0.6875, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.6875, 0.125), (1.0, 1.0, 0.875)),
            ],
            7 => [
                ((0.25, 0.25, 0.25), (0.75, 0.6875, 0.75)),
                ((0.375, 0.25, 0.75), (0.625, 0.5, 1.0)),
                ((0.0, 0.625, 0.0), (0.25, 0.6875, 1.0)),
                ((0.25, 0.625, 0.0), (1.0, 0.6875, 0.25)),
                ((0.25, 0.625, 0.75), (1.0, 0.6875, 1.0)),
                ((0.75, 0.625, 0.25), (1.0, 0.6875, 0.75)),
                ((0.0, 0.6875, 0.0), (0.125, 1.0, 1.0)),
                ((0.125, 0.6875, 0.0), (1.0, 1.0, 0.125)),
                ((0.125, 0.6875, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.6875, 0.125), (1.0, 1.0, 0.875)),
            ],
            8 => [
                ((0.0, 0.25, 0.375), (0.75, 0.5, 0.625)),
                ((0.25, 0.25, 0.25), (0.75, 0.6875, 0.375)),
                ((0.25, 0.25, 0.625), (0.75, 0.6875, 0.75)),
                ((0.25, 0.5, 0.375), (0.75, 0.6875, 0.625)),
                ((0.0, 0.625, 0.0), (0.25, 0.6875, 1.0)),
                ((0.25, 0.625, 0.0), (1.0, 0.6875, 0.25)),
                ((0.25, 0.625, 0.75), (1.0, 0.6875, 1.0)),
                ((0.75, 0.625, 0.25), (1.0, 0.6875, 0.75)),
                ((0.0, 0.6875, 0.0), (0.125, 1.0, 1.0)),
                ((0.125, 0.6875, 0.0), (1.0, 1.0, 0.125)),
                ((0.125, 0.6875, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.6875, 0.125), (1.0, 1.0, 0.875)),
            ],
            9 => [
                ((0.25, 0.25, 0.25), (0.75, 0.6875, 0.75)),
                ((0.75, 0.25, 0.375), (1.0, 0.5, 0.625)),
                ((0.0, 0.625, 0.0), (0.25, 0.6875, 1.0)),
                ((0.25, 0.625, 0.0), (1.0, 0.6875, 0.25)),
                ((0.25, 0.625, 0.75), (1.0, 0.6875, 1.0)),
                ((0.75, 0.625, 0.25), (1.0, 0.6875, 0.75)),
                ((0.0, 0.6875, 0.0), (0.125, 1.0, 1.0)),
                ((0.125, 0.6875, 0.0), (1.0, 1.0, 0.125)),
                ((0.125, 0.6875, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.6875, 0.125), (1.0, 1.0, 0.875)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    QuartzBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "quartz_block") },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    ChiseledQuartzBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chiseled_quartz_block") },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    QuartzPillar {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "quartz_pillar") },
        variant format!("axis={}", axis.as_string()),
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    QuartzStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "quartz_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => QuartzStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    ActivatorRail {
        props {
            powered: bool = [true, false],
            shape: RailShape = [RailShape::NorthSouth, RailShape::EastWest, RailShape::AscendingEast, RailShape::AscendingWest, RailShape::AscendingNorth, RailShape::AscendingSouth],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                RailShape::NorthSouth => 0,
                RailShape::EastWest => 2,
                RailShape::AscendingEast => 4,
                RailShape::AscendingWest => 6,
                RailShape::AscendingNorth => 8,
                RailShape::AscendingSouth => 10,
                _ => unreachable!(),
            } +
            if powered { 0 } else { 12 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "activator_rail") },
        variant format!("powered={},shape={}", powered, shape.as_string()),
        collision { _ => [], },
        hardness 0.7,
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    Dropper {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
            triggered: bool = [true, false],
        },
        offset (
            if triggered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::East => 2,
                Direction::South => 4,
                Direction::West => 6,
                Direction::Up => 8,
                Direction::Down => 10,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dropper") },
        variant format!("facing={}", facing.as_string()),
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WhiteTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    OrangeTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    MagentaTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    LightBlueTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    YellowTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    LimeTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PinkTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    GrayTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    LightGrayTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CyanTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PurpleTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BlueTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BrownTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    GreenTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    RedTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BlackTerracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WhiteStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            WhiteStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    OrangeStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            OrangeStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    MagentaStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            MagentaStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    LightBlueStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            LightBlueStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    YellowStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            YellowStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    LimeStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            LimeStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    PinkStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            PinkStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    GrayStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            GrayStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    LightGrayStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            LightGrayStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    CyanStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            CyanStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    PurpleStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            PurpleStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    BlueStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            BlueStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    BrownStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            BrownStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    GreenStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            GreenStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    RedStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            RedStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    BlackStainedGlassPane {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_stained_glass_pane") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            1 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            2 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            3 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            4 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            5 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            6 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            7 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            8 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            9 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            10 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            11 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
                ((0.5625, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            12 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            13 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            14 => [
                ((0.0, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            15 => [
                ((0.4375, 0.0, 0.4375), (1.0, 1.0, 0.5625)),
            ],
            16 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            17 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            19 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            21 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            22 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.4375)),
            ],
            23 => [
                ((0.4375, 0.0, 0.0), (0.5625, 1.0, 0.5625)),
            ],
            24 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            25 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
                ((0.4375, 0.0, 0.5625), (0.5625, 1.0, 1.0)),
            ],
            27 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            29 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            30 => [
                ((0.0, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            31 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
        },
        update_state (world, pos) => {
            let (mut north, mut south, mut west, mut east) = can_connect_sides(world, pos, &can_connect_glasspane);
            if !north && !south && !west && !east {
                (north, south, west, east) = (true, true, true, true);
            }
            BlackStainedGlassPane { north, south, west, east, waterlogged }
        },
        hardness 0.3,
        is_waterlogged waterlogged,
    }
    AcaciaStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "acacia_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => AcaciaStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    DarkOakStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_oak_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => DarkOakStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    MangroveStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mangrove_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    SlimeBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "slime_block") },
        hardness 0.0,
    }
    Barrier {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "barrier") },
    }
    Light {
        props {
            level: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            level as usize * 2
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 15,
            collidable: false,
        },
        model { ("minecraft", "light") },
        variant format!("level={}", level),
        collision { _ => [], },
        is_waterlogged waterlogged,
    }
    IronTrapdoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            open: bool = [true, false],
            powered: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if powered { 0 } else { 2 } +
            if open { 0 } else { 4 } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 8,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "iron_trapdoor") },
        variant format!("facing={},half={},open={}", facing.as_string(), half.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            23 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            32 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
        },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    Prismarine {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "prismarine") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PrismarineBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "prismarine_bricks") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DarkPrismarine {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_prismarine") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PrismarineStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "prismarine_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PrismarineBrickStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "prismarine_brick_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DarkPrismarineStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_prismarine_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PrismarineSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "prismarine_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PrismarineBrickSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "prismarine_brick_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DarkPrismarineSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_prismarine_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SeaLantern {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "sea_lantern") },
        hardness 0.3,
    }
    HayBlock {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "hay_block") },
        variant format!("axis={}", axis.as_string()),
        hardness 0.5,
        best_tools [ Tool::Hoe(_), ],
    }
    WhiteCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    OrangeCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    MagentaCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    LightBlueCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    YellowCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    LimeCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    PinkCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    GrayCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    LightGrayCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    CyanCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    PurpleCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    BlueCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    BrownCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    GreenCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    RedCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    BlackCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    Terracotta {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "terracotta") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CoalBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "coal_block") },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PackedIce {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "packed_ice") },
        hardness 0.5,
        best_tools [ Tool::Pickaxe(_), ],
    }
    Sunflower {
        props {
            half: BlockHalf = [BlockHalf::Upper, BlockHalf::Lower],
        },
        offset match half {
            BlockHalf::Upper => 0,
            BlockHalf::Lower => 1,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "sunflower") },
        variant format!("half={}", half.as_string()),
        collision { _ => [], },
        update_state (world, pos) => update_double_plant_state(world, pos, half),
        hardness 0.0,
    }
    Lilac {
        props {
            half: BlockHalf = [BlockHalf::Upper, BlockHalf::Lower],
        },
        offset match half {
            BlockHalf::Upper => 0,
            BlockHalf::Lower => 1,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "lilac") },
        variant format!("half={}", half.as_string()),
        collision { _ => [], },
        update_state (world, pos) => update_double_plant_state(world, pos, half),
        hardness 0.0,
    }
    RoseBush {
        props {
            half: BlockHalf = [BlockHalf::Upper, BlockHalf::Lower],
        },
        offset match half {
            BlockHalf::Upper => 0,
            BlockHalf::Lower => 1,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "rose_bush") },
        variant format!("half={}", half.as_string()),
        collision { _ => [], },
        update_state (world, pos) => update_double_plant_state(world, pos, half),
        hardness 0.0,
    }
    Peony {
        props {
            half: BlockHalf = [BlockHalf::Upper, BlockHalf::Lower],
        },
        offset match half {
            BlockHalf::Upper => 0,
            BlockHalf::Lower => 1,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "peony") },
        variant format!("half={}", half.as_string()),
        collision { _ => [], },
        update_state (world, pos) => update_double_plant_state(world, pos, half),
        hardness 0.0,
    }
    TallGrass {
        props {
            half: BlockHalf = [BlockHalf::Upper, BlockHalf::Lower],
        },
        offset match half {
            BlockHalf::Upper => 0,
            BlockHalf::Lower => 1,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "tall_grass") },
        variant format!("half={}", half.as_string()),
        tint TintType::Grass,
        collision { _ => [], },
        update_state (world, pos) => update_double_plant_state(world, pos, half),
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    LargeFern {
        props {
            half: BlockHalf = [BlockHalf::Upper, BlockHalf::Lower],
        },
        offset match half {
            BlockHalf::Upper => 0,
            BlockHalf::Lower => 1,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "large_fern") },
        variant format!("half={}", half.as_string()),
        tint TintType::Grass,
        collision { _ => [], },
        update_state (world, pos) => update_double_plant_state(world, pos, half),
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    WhiteBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "white_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    OrangeBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "orange_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    MagentaBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "magenta_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    LightBlueBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "light_blue_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    YellowBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "yellow_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    LimeBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "lime_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    PinkBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "pink_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    GrayBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "gray_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    LightGrayBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "light_gray_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    CyanBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "cyan_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    PurpleBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "purple_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    BlueBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "blue_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    BrownBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "brown_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    GreenBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "green_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    RedBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "red_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    BlackBanner {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset rotation as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "black_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    WhiteWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "white_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    OrangeWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "orange_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    MagentaWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "magenta_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    LightBlueWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "light_blue_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    YellowWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "yellow_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    LimeWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "lime_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    PinkWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "pink_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    GrayWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "gray_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    LightGrayWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "light_gray_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    CyanWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "cyan_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    PurpleWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "purple_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    BlueWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "blue_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    BrownWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "brown_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    GreenWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "green_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    RedWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "red_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    BlackWallBanner {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "black_wall_banner") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    RedSandstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_sandstone") },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    ChiseledRedSandstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chiseled_red_sandstone") },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CutRedSandstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cut_red_sandstone") },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    RedSandstoneStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_sandstone_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => RedSandstoneStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    OakSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oak_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    SpruceSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "spruce_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    BirchSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "birch_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    JungleSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jungle_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    AcaciaSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "acacia_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    DarkOakSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_oak_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    MangroveSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mangrove_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    StoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SmoothStoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_stone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SandstoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "sandstone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    CutSandstoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cut_sandstone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PetrifiedOakSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "petrified_oak_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    CobblestoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cobblestone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    BrickSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brick_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    StoneBrickSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stone_brick_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    MudBrickSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mud_brick_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    NetherBrickSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "nether_brick_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    QuartzSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "quartz_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    RedSandstoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_sandstone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    CutRedSandstoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cut_red_sandstone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PurpurSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purpur_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SmoothStone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_stone") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    SmoothSandstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_sandstone") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    SmoothQuartz {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_quartz") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    SmoothRedSandstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_red_sandstone") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    SpruceFenceGate {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            in_wall: bool = [true, false],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            if in_wall { 0 } else { 4 } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "spruce_fence_gate") },
        variant format!("facing={},in_wall={},open={}", facing.as_string(), in_wall, open),
        collision {
            0 => [
            ],
            1 => [
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            3 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
            ],
            5 => [
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            7 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            11 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
            ],
            13 => [
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
            ],
            17 => [
            ],
            18 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
            ],
            21 => [
            ],
            22 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            24 => [
            ],
            25 => [
            ],
            26 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            28 => [
            ],
            29 => [
            ],
            30 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            31 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
        },
        update_state (world, pos) => SpruceFenceGate {
            facing,
            in_wall: fence_gate_update_state(world, pos, facing),
            open,
            powered,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    BirchFenceGate {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            in_wall: bool = [true, false],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            if in_wall { 0 } else { 4 } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "birch_fence_gate") },
        variant format!("facing={},in_wall={},open={}", facing.as_string(), in_wall, open),
        collision {
            0 => [
            ],
            1 => [
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            3 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
            ],
            5 => [
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            7 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            11 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
            ],
            13 => [
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
            ],
            17 => [
            ],
            18 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
            ],
            21 => [
            ],
            22 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            24 => [
            ],
            25 => [
            ],
            26 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            28 => [
            ],
            29 => [
            ],
            30 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            31 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
        },
        update_state (world, pos) => BirchFenceGate {
            facing,
            in_wall: fence_gate_update_state(world, pos, facing),
            open,
            powered,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    JungleFenceGate {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            in_wall: bool = [true, false],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            if in_wall { 0 } else { 4 } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jungle_fence_gate") },
        variant format!("facing={},in_wall={},open={}", facing.as_string(), in_wall, open),
        collision {
            0 => [
            ],
            1 => [
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            3 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
            ],
            5 => [
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            7 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            11 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
            ],
            13 => [
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
            ],
            17 => [
            ],
            18 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
            ],
            21 => [
            ],
            22 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            24 => [
            ],
            25 => [
            ],
            26 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            28 => [
            ],
            29 => [
            ],
            30 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            31 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
        },
        update_state (world, pos) => JungleFenceGate {
            facing,
            in_wall: fence_gate_update_state(world, pos, facing),
            open,
            powered,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    AcaciaFenceGate {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            in_wall: bool = [true, false],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            if in_wall { 0 } else { 4 } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "acacia_fence_gate") },
        variant format!("facing={},in_wall={},open={}", facing.as_string(), in_wall, open),
        collision {
            0 => [
            ],
            1 => [
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            3 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
            ],
            5 => [
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            7 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            11 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
            ],
            13 => [
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
            ],
            17 => [
            ],
            18 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
            ],
            21 => [
            ],
            22 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            24 => [
            ],
            25 => [
            ],
            26 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            28 => [
            ],
            29 => [
            ],
            30 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            31 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
        },
        update_state (world, pos) => AcaciaFenceGate {
            facing,
            in_wall: fence_gate_update_state(world, pos, facing),
            open,
            powered,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    DarkOakFenceGate {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            in_wall: bool = [true, false],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            if in_wall { 0 } else { 4 } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_oak_fence_gate") },
        variant format!("facing={},in_wall={},open={}", facing.as_string(), in_wall, open),
        collision {
            0 => [
            ],
            1 => [
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            3 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
            ],
            5 => [
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            7 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            11 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
            ],
            13 => [
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
            ],
            17 => [
            ],
            18 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
            ],
            21 => [
            ],
            22 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            24 => [
            ],
            25 => [
            ],
            26 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            28 => [
            ],
            29 => [
            ],
            30 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            31 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
        },
        update_state (world, pos) => DarkOakFenceGate {
            facing,
            in_wall: fence_gate_update_state(world, pos, facing),
            open,
            powered,
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    MangroveFenceGate {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            in_wall: bool = [true, false],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            if in_wall { 0 } else { 4 } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mangrove_fence_gate") },
        variant format!("facing={},in_wall={},open={}", facing.as_string(), in_wall, open),
        collision {
            0 => [
            ],
            1 => [
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            3 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
            ],
            5 => [
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            7 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            11 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
            ],
            13 => [
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
            ],
            17 => [
            ],
            18 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
            ],
            21 => [
            ],
            22 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            24 => [
            ],
            25 => [
            ],
            26 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            28 => [
            ],
            29 => [
            ],
            30 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            31 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    SpruceFence {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "spruce_fence") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            1 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            3 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            5 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            7 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            9 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            11 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            13 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            17 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            21 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            22 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            24 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            25 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            29 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            30 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            31 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
        },
        update_state (world, pos) => {
            let (north, south, west, east) = can_connect_sides(world, pos, &can_connect_fence);
            SpruceFence { north, south, west, east, waterlogged }
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    BirchFence {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "birch_fence") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            1 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            3 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            5 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            7 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            9 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            11 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            13 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            17 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            21 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            22 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            24 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            25 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            29 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            30 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            31 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
        },
        update_state (world, pos) => {
            let (north, south, west, east) = can_connect_sides(world, pos, &can_connect_fence);
            BirchFence { north, south, west, east, waterlogged }
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    JungleFence {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jungle_fence") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            1 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            3 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            5 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            7 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            9 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            11 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            13 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            17 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            21 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            22 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            24 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            25 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            29 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            30 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            31 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
        },
        update_state (world, pos) => {
            let (north, south, west, east) = can_connect_sides(world, pos, &can_connect_fence);
            JungleFence { north, south, west, east, waterlogged }
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    AcaciaFence {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "acacia_fence") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            1 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            3 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            5 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            7 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            9 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            11 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            13 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            17 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            21 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            22 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            24 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            25 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            29 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            30 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            31 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
        },
        update_state (world, pos) => {
            let (north, south, west, east) = can_connect_sides(world, pos, &can_connect_fence);
            AcaciaFence { north, south, west, east, waterlogged }
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    DarkOakFence {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_oak_fence") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            1 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            3 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            5 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            7 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            9 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            11 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            13 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            17 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            21 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            22 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            24 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            25 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            29 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            30 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            31 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
        },
        update_state (world, pos) => {
            let (north, south, west, east) = can_connect_sides(world, pos, &can_connect_fence);
            DarkOakFence { north, south, west, east, waterlogged }
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    MangroveFence {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mangrove_fence") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            1 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            3 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            5 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            7 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            9 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            11 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            13 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            17 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            21 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            22 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            24 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            25 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            29 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            30 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            31 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    SpruceDoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: DoorHalf = [DoorHalf::Upper, DoorHalf::Lower],
            hinge: Side = [Side::Left, Side::Right],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            match hinge {
                Side::Left => 0,
                Side::Right => 4,
            } +
            match half {
                DoorHalf::Upper => 0,
                DoorHalf::Lower => 8,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "spruce_door") },
        variant format!("facing={},half={},hinge={},open={}", facing.as_string(), half.as_string(), hinge.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            13 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            17 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            23 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            24 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            25 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            32 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            38 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            46 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => {
            let (facing, hinge, open, powered) = update_door_state(world, pos, half, facing, hinge, open, powered);
            SpruceDoor { facing, half, hinge, open, powered }
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
    }
    BirchDoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: DoorHalf = [DoorHalf::Upper, DoorHalf::Lower],
            hinge: Side = [Side::Left, Side::Right],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            match hinge {
                Side::Left => 0,
                Side::Right => 4,
            } +
            match half {
                DoorHalf::Upper => 0,
                DoorHalf::Lower => 8,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "birch_door") },
        variant format!("facing={},half={},hinge={},open={}", facing.as_string(), half.as_string(), hinge.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            13 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            17 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            23 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            24 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            25 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            32 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            38 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            46 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => {
            let (facing, hinge, open, powered) = update_door_state(world, pos, half, facing, hinge, open, powered);
            BirchDoor { facing, half, hinge, open, powered }
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
    }
    JungleDoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: DoorHalf = [DoorHalf::Upper, DoorHalf::Lower],
            hinge: Side = [Side::Left, Side::Right],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            match hinge {
                Side::Left => 0,
                Side::Right => 4,
            } +
            match half {
                DoorHalf::Upper => 0,
                DoorHalf::Lower => 8,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jungle_door") },
        variant format!("facing={},half={},hinge={},open={}", facing.as_string(), half.as_string(), hinge.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            13 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            17 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            23 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            24 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            25 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            32 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            38 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            46 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => {
            let (facing, hinge, open, powered) = update_door_state(world, pos, half, facing, hinge, open, powered);
            JungleDoor { facing, half, hinge, open, powered }
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
    }
    AcaciaDoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: DoorHalf = [DoorHalf::Upper, DoorHalf::Lower],
            hinge: Side = [Side::Left, Side::Right],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            match hinge {
                Side::Left => 0,
                Side::Right => 4,
            } +
            match half {
                DoorHalf::Upper => 0,
                DoorHalf::Lower => 8,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "acacia_door") },
        variant format!("facing={},half={},hinge={},open={}", facing.as_string(), half.as_string(), hinge.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            13 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            17 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            23 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            24 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            25 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            32 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            38 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            46 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => {
            let (facing, hinge, open, powered) = update_door_state(world, pos, half, facing, hinge, open, powered);
            AcaciaDoor { facing, half, hinge, open, powered }
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
    }
    DarkOakDoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: DoorHalf = [DoorHalf::Upper, DoorHalf::Lower],
            hinge: Side = [Side::Left, Side::Right],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            match hinge {
                Side::Left => 0,
                Side::Right => 4,
            } +
            match half {
                DoorHalf::Upper => 0,
                DoorHalf::Lower => 8,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dark_oak_door") },
        variant format!("facing={},half={},hinge={},open={}", facing.as_string(), half.as_string(), hinge.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            13 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            17 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            23 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            24 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            25 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            32 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            38 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            46 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => {
            let (facing, hinge, open, powered) = update_door_state(world, pos, half, facing, hinge, open, powered);
            DarkOakDoor { facing, half, hinge, open, powered }
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
    }
    MangroveDoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: DoorHalf = [DoorHalf::Upper, DoorHalf::Lower],
            hinge: Side = [Side::Left, Side::Right],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            match hinge {
                Side::Left => 0,
                Side::Right => 4,
            } +
            match half {
                DoorHalf::Upper => 0,
                DoorHalf::Lower => 8,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mangrove_door") },
        variant format!("facing={},half={},hinge={},open={}", facing.as_string(), half.as_string(), hinge.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            13 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            17 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            23 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            24 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            25 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            32 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            38 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            46 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
    }
    EndRod {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 14,
            collidable: true,
        },
        model { ("minecraft", "end_rod") },
        variant format!("facing={}", facing.as_string()),
        collision {
            0 => [
                ((0.375, 0.375, 0.0), (0.625, 0.625, 1.0)),
            ],
            1 => [
                ((0.0, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            2 => [
                ((0.375, 0.375, 0.0), (0.625, 0.625, 1.0)),
            ],
            3 => [
                ((0.0, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            4 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
            ],
            5 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
            ],
        },
        hardness 0.0,
    }
    ChorusPlant {
        props {
            down: bool = [true, false],
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            up: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if up { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 } +
            if down { 0 } else { 32 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chorus_plant") },
        multipart (key, val) => match key {
            "down" => val.contains(&down.to_string()),
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "up" => val.contains(&up.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            1 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            2 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            3 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            4 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            5 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            6 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            7 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            8 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            9 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            10 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            11 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            12 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            13 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            14 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            15 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            16 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            17 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            18 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            19 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            20 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
            ],
            21 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
            ],
            22 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
            ],
            23 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
            ],
            24 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            25 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            26 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            27 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            28 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
            ],
            29 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            30 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.0, 0.1875, 0.1875), (0.1875, 0.8125, 0.8125)),
            ],
            31 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.8125, 0.8125)),
            ],
            32 => [
                ((0.0, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            33 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            34 => [
                ((0.0, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            35 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            36 => [
                ((0.0, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            37 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.8125)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            38 => [
                ((0.0, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
            ],
            39 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.8125)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            40 => [
                ((0.0, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            41 => [
                ((0.1875, 0.1875, 0.1875), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            42 => [
                ((0.0, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            43 => [
                ((0.1875, 0.1875, 0.1875), (0.8125, 0.8125, 1.0)),
                ((0.8125, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            44 => [
                ((0.0, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            45 => [
                ((0.1875, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            46 => [
                ((0.0, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            47 => [
                ((0.1875, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            48 => [
                ((0.0, 0.1875, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            49 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 1.0)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            50 => [
                ((0.0, 0.1875, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            51 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 1.0)),
            ],
            52 => [
                ((0.0, 0.1875, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            53 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            54 => [
                ((0.0, 0.1875, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.1875)),
            ],
            55 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.8125)),
            ],
            56 => [
                ((0.0, 0.1875, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            57 => [
                ((0.1875, 0.1875, 0.1875), (0.8125, 0.8125, 1.0)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            58 => [
                ((0.0, 0.1875, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.1875, 0.8125), (0.8125, 0.8125, 1.0)),
            ],
            59 => [
                ((0.1875, 0.1875, 0.1875), (0.8125, 0.8125, 1.0)),
            ],
            60 => [
                ((0.0, 0.1875, 0.1875), (0.8125, 0.8125, 0.8125)),
                ((0.1875, 0.8125, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            61 => [
                ((0.1875, 0.1875, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            62 => [
                ((0.0, 0.1875, 0.1875), (0.8125, 0.8125, 0.8125)),
            ],
            63 => [
                ((0.1875, 0.1875, 0.1875), (0.8125, 0.8125, 0.8125)),
            ],
        },
        update_state (world, pos) => ChorusPlant {
            up: matches!(world.get_block(pos.shift(Direction::Up)), ChorusPlant { .. } | ChorusFlower { .. }),
            down: matches!(world.get_block(pos.shift(Direction::Down)), ChorusPlant { .. } | ChorusFlower { .. } | EndStone { .. }),
            north: matches!(world.get_block(pos.shift(Direction::North)), ChorusPlant { .. } | ChorusFlower { .. }),
            south: matches!(world.get_block(pos.shift(Direction::South)), ChorusPlant { .. } | ChorusFlower { .. }),
            west: matches!(world.get_block(pos.shift(Direction::West)), ChorusPlant { .. } | ChorusFlower { .. }),
            east: matches!(world.get_block(pos.shift(Direction::East)), ChorusPlant { .. } | ChorusFlower { .. }),
        },
        hardness 0.4,
        best_tools [ Tool::Axe(_), ],
    }
    ChorusFlower {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chorus_flower") },
        variant format!("age={}", age),
        hardness 0.4,
        best_tools [ Tool::Axe(_), ],
    }
    PurpurBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purpur_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PurpurPillar {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purpur_pillar") },
        variant format!("axis={}", axis.as_string()),
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PurpurStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purpur_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        update_state (world, pos) => PurpurStairs {
            facing,
            half,
            shape: update_stair_shape(world, pos, facing),
            waterlogged,
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    EndStoneBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "end_stone_bricks") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Beetroots {
        props {
            age: u8 = [0, 1, 2, 3],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "beetroots") },
        variant format!("age={}", age),
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    DirtPath {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dirt_path") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.9375, 1.0)),
            ],
        },
        hardness 0.65,
        best_tools [ Tool::Shovel(_), ],
    }
    EndGateway {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 15,
            collidable: false,
        },
        model { ("minecraft", "end_gateway") },
        collision { _ => [], },
    }
    RepeatingCommandBlock {
        props {
            conditional: bool = [true, false],
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset (
            match facing {
                Direction::North => 0,
                Direction::East => 1,
                Direction::South => 2,
                Direction::West => 3,
                Direction::Up => 4,
                Direction::Down => 5,
                _ => unreachable!(),
            } +
            if conditional { 0 } else { 6 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "repeating_command_block") },
        variant format!("conditional={},facing={}", conditional, facing.as_string()),
    }
    ChainCommandBlock {
        props {
            conditional: bool = [true, false],
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset (
            match facing {
                Direction::North => 0,
                Direction::East => 1,
                Direction::South => 2,
                Direction::West => 3,
                Direction::Up => 4,
                Direction::Down => 5,
                _ => unreachable!(),
            } +
            if conditional { 0 } else { 6 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chain_command_block") },
        variant format!("conditional={},facing={}", conditional, facing.as_string()),
    }
    FrostedIce {
        props {
            age: u8 = [0, 1, 2, 3],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "frosted_ice") },
        variant format!("age={}", age),
        hardness 0.5,
    }
    MagmaBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 3,
            collidable: true,
        },
        model { ("minecraft", "magma_block") },
        hardness 0.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    NetherWartBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "nether_wart_block") },
        hardness 1.0,
        best_tools [ Tool::Hoe(_), ],
    }
    RedNetherBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_nether_bricks") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BoneBlock {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "bone_block") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    StructureVoid {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "structure_void") },
        collision { _ => [], },
        hardness 0.0,
    }
    Observer {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::East => 2,
                Direction::South => 4,
                Direction::West => 6,
                Direction::Up => 8,
                Direction::Down => 10,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "observer") },
        variant format!("facing={},powered={}", facing.as_string(), powered),
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    ShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    WhiteShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    OrangeShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    MagentaShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    LightBlueShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    YellowShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    LimeShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    PinkShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    GrayShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    LightGrayShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    CyanShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    PurpleShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    BlueShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    BrownShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    GreenShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    RedShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    BlackShulkerBox {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
        },
        offset match facing {
            Direction::North => 0,
            Direction::East => 1,
            Direction::South => 2,
            Direction::West => 3,
            Direction::Up => 4,
            Direction::Down => 5,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_shulker_box") },
        hardness 2.0,
        best_tools [ Tool::Pickaxe(_), ],
    }
    WhiteGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    OrangeGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    MagentaGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    LightBlueGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    YellowGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    LimeGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PinkGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    GrayGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    LightGrayGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CyanGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PurpleGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BlueGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BrownGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    GreenGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    RedGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BlackGlazedTerracotta {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_glazed_terracotta") },
        variant format!("facing={}", facing.as_string()),
        hardness 1.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WhiteConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    OrangeConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    MagentaConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    LightBlueConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    YellowConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    LimeConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PinkConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    GrayConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    LightGrayConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CyanConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PurpleConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BlueConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BrownConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    GreenConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    RedConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BlackConcrete {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_concrete") },
        hardness 1.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WhiteConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    OrangeConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    MagentaConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    LightBlueConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    YellowConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    LimeConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    PinkConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    GrayConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    LightGrayConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    CyanConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    PurpleConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    BlueConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    BrownConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    GreenConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    RedConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    BlackConcretePowder {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_concrete_powder") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    Kelp {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "kelp") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged true,
    }
    KelpPlant {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "kelp_plant") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged true,
    }
    DriedKelpBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dried_kelp_block") },
        hardness 0.5,
        best_tools [ Tool::Hoe(_), ],
    }
    TurtleEgg {
        props {
            eggs: u8 = [1, 2, 3, 4],
            hatch: u8 = [0, 1, 2],
        },
        offset (
            hatch as usize +
            (eggs as usize - 1) * 3
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "turtle_egg") },
        variant format!("eggs={},hatch={}", eggs, hatch),
        collision {
            0 => [
                ((0.1875, 0.0, 0.1875), (0.75, 0.4375, 0.75)),
            ],
            1 => [
                ((0.1875, 0.0, 0.1875), (0.75, 0.4375, 0.75)),
            ],
            2 => [
                ((0.1875, 0.0, 0.1875), (0.75, 0.4375, 0.75)),
            ],
            3 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.4375, 0.9375)),
            ],
            4 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.4375, 0.9375)),
            ],
            5 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.4375, 0.9375)),
            ],
            6 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.4375, 0.9375)),
            ],
            7 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.4375, 0.9375)),
            ],
            8 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.4375, 0.9375)),
            ],
            9 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.4375, 0.9375)),
            ],
            10 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.4375, 0.9375)),
            ],
            11 => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.4375, 0.9375)),
            ],
        },
        hardness 0.5,
    }
    DeadTubeCoralBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dead_tube_coral_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeadBrainCoralBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dead_brain_coral_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeadBubbleCoralBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dead_bubble_coral_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeadFireCoralBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dead_fire_coral_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeadHornCoralBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dead_horn_coral_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    TubeCoralBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "tube_coral_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BrainCoralBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brain_coral_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BubbleCoralBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "bubble_coral_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    FireCoralBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "fire_coral_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    HornCoralBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "horn_coral_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeadTubeCoral {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_tube_coral") },
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadBrainCoral {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_brain_coral") },
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadBubbleCoral {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_bubble_coral") },
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadFireCoral {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_fire_coral") },
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadHornCoral {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_horn_coral") },
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    TubeCoral {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "tube_coral") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    BrainCoral {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "brain_coral") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    BubbleCoral {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "bubble_coral") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    FireCoral {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "fire_coral") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    HornCoral {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "horn_coral") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    DeadTubeCoralFan {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_tube_coral_fan") },
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadBrainCoralFan {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_brain_coral_fan") },
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadBubbleCoralFan {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_bubble_coral_fan") },
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadFireCoralFan {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_fire_coral_fan") },
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadHornCoralFan {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_horn_coral_fan") },
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    TubeCoralFan {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "tube_coral_fan") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    BrainCoralFan {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "brain_coral_fan") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    BubbleCoralFan {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "bubble_coral_fan") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    FireCoralFan {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "fire_coral_fan") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    HornCoralFan {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "horn_coral_fan") },
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    DeadTubeCoralWallFan {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_tube_coral_wall_fan") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadBrainCoralWallFan {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_brain_coral_wall_fan") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadBubbleCoralWallFan {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_bubble_coral_wall_fan") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadFireCoralWallFan {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_fire_coral_wall_fan") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeadHornCoralWallFan {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "dead_horn_coral_wall_fan") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    TubeCoralWallFan {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "tube_coral_wall_fan") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    BrainCoralWallFan {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "brain_coral_wall_fan") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    BubbleCoralWallFan {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "bubble_coral_wall_fan") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    FireCoralWallFan {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "fire_coral_wall_fan") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    HornCoralWallFan {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "horn_coral_wall_fan") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    SeaPickle {
        props {
            pickles: u8 = [1, 2, 3, 4],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            (pickles as usize - 1) * 2
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 6,
            collidable: true,
        },
        model { ("minecraft", "sea_pickle") },
        variant format!("pickles={},waterlogged={}", pickles, waterlogged),
        collision {
            0 => [
                ((0.375, 0.0, 0.375), (0.625, 0.375, 0.625)),
            ],
            1 => [
                ((0.375, 0.0, 0.375), (0.625, 0.375, 0.625)),
            ],
            2 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.375, 0.8125)),
            ],
            3 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.375, 0.8125)),
            ],
            4 => [
                ((0.125, 0.0, 0.125), (0.875, 0.375, 0.875)),
            ],
            5 => [
                ((0.125, 0.0, 0.125), (0.875, 0.375, 0.875)),
            ],
            6 => [
                ((0.125, 0.0, 0.125), (0.875, 0.4375, 0.875)),
            ],
            7 => [
                ((0.125, 0.0, 0.125), (0.875, 0.4375, 0.875)),
            ],
        },
        hardness 0.0,
        is_waterlogged waterlogged,
    }
    BlueIce {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_ice") },
        hardness 2.8,
        best_tools [ Tool::Pickaxe(_), ],
    }
    Conduit {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "conduit") },
        collision {
            _ => [
                ((0.3125, 0.3125, 0.3125), (0.6875, 0.6875, 0.6875)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    BambooSapling {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "bamboo_sapling") },
        collision { _ => [], },
        hardness 1.0,
    }
    Bamboo {
        props {
            age: u8 = [0, 1],
            leaves: BambooLeaves = [BambooLeaves::None, BambooLeaves::Small, BambooLeaves::Large],
            stage: u8 = [0, 1],
        },
        offset (
            stage as usize +
            match leaves {
                BambooLeaves::None => 0,
                BambooLeaves::Small => 2,
                BambooLeaves::Large => 4,
            } +
            age as usize * 6
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "bamboo") },
        multipart (key, val) => match key {
            "age" => val.contains(&age.to_string()),
            "leaves" => val.contains(leaves.as_string()),
            "stage" => val.contains(&stage.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
            1 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
            2 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
            3 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
            4 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
            5 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
            6 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
            7 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
            8 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
            9 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
            10 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
            11 => [
                ((0.15625, 0.0, 0.15625), (0.34375, 1.0, 0.34375)),
            ],
        },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
    }
    PottedBamboo {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_bamboo") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    VoidAir {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "void_air") },
        collision { _ => [], },
        hardness 0.0,
    }
    CaveAir {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "cave_air") },
        collision { _ => [], },
        hardness 0.0,
    }
    BubbleColumn {
        props {
            drag: bool = [true, false],
        },
        offset if drag { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "bubble_column") },
        collision { _ => [], },
        hardness 0.0,
    }
    PolishedGraniteStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_granite_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SmoothRedSandstoneStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_red_sandstone_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    MossyStoneBrickStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mossy_stone_brick_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedDioriteStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_diorite_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    MossyCobblestoneStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mossy_cobblestone_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    EndStoneBrickStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "end_stone_brick_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    StoneStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stone_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SmoothSandstoneStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_sandstone_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SmoothQuartzStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_quartz_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    GraniteStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "granite_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    AndesiteStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "andesite_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    RedNetherBrickStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_nether_brick_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedAndesiteStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_andesite_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DioriteStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "diorite_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedGraniteSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_granite_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SmoothRedSandstoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_red_sandstone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    MossyStoneBrickSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mossy_stone_brick_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedDioriteSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_diorite_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    MossyCobblestoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mossy_cobblestone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    EndStoneBrickSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "end_stone_brick_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SmoothSandstoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_sandstone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SmoothQuartzSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_quartz_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    GraniteSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "granite_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    AndesiteSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "andesite_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    RedNetherBrickSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_nether_brick_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedAndesiteSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_andesite_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DioriteSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "diorite_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    BrickWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brick_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PrismarineWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "prismarine_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    RedSandstoneWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_sandstone_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    MossyStoneBrickWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mossy_stone_brick_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    GraniteWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "granite_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    StoneBrickWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stone_brick_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    MudBrickWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mud_brick_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    NetherBrickWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "nether_brick_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    AndesiteWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "andesite_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    RedNetherBrickWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_nether_brick_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SandstoneWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "sandstone_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    EndStoneBrickWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "end_stone_brick_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DioriteWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "diorite_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    Scaffolding {
        props {
            bottom: bool = [true, false],
            distance: u8 = [0, 1, 2, 3, 4, 5, 6, 7],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            distance as usize * 2 +
            if bottom { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "scaffolding") },
        variant format!("bottom={}", bottom),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (0.125, 1.0, 0.125)),
                ((0.0, 0.0, 0.875), (0.125, 1.0, 1.0)),
                ((0.875, 0.0, 0.0), (1.0, 1.0, 0.125)),
                ((0.875, 0.0, 0.875), (1.0, 1.0, 1.0)),
                ((0.0, 0.875, 0.125), (1.0, 1.0, 0.875)),
                ((0.125, 0.875, 0.0), (0.875, 1.0, 0.125)),
                ((0.125, 0.875, 0.875), (0.875, 1.0, 1.0)),
            ],
        },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    Loom {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "loom") },
        variant format!("facing={}", facing.as_string()),
        hardness 2.5,
        best_tools [ Tool::Axe(_), ],
    }
    Barrel {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
            open: bool = [true, false],
        },
        offset (
            if open { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::East => 2,
                Direction::South => 4,
                Direction::West => 6,
                Direction::Up => 8,
                Direction::Down => 10,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "barrel") },
        variant format!("facing={},open={}", facing.as_string(), open),
        hardness 2.5,
        best_tools [ Tool::Axe(_), ],
    }
    Smoker {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            lit: bool = [true, false],
        },
        offset (
            if lit { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smoker") },
        variant format!("facing={},lit={}", facing.as_string(), lit),
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BlastFurnace {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            lit: bool = [true, false],
        },
        offset (
            if lit { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blast_furnace") },
        variant format!("facing={},lit={}", facing.as_string(), lit),
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CartographyTable {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cartography_table") },
        hardness 2.5,
        best_tools [ Tool::Axe(_), ],
    }
    FletchingTable {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "fletching_table") },
        hardness 2.5,
        best_tools [ Tool::Axe(_), ],
    }
    Grindstone {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset (
            match facing {
                Direction::North => 0,
                Direction::South => 1,
                Direction::West => 2,
                Direction::East => 3,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 4,
                AttachedFace::Ceiling => 8,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "grindstone") },
        variant format!("face={},facing={}", face.as_string(), facing.as_string()),
        collision {
            0 => [
                ((0.125, 0.0, 0.375), (0.25, 0.8125, 0.625)),
                ((0.75, 0.0, 0.375), (0.875, 0.8125, 0.625)),
                ((0.25, 0.25, 0.125), (0.75, 1.0, 0.875)),
                ((0.125, 0.4375, 0.3125), (0.25, 0.8125, 0.375)),
                ((0.125, 0.4375, 0.625), (0.25, 0.8125, 0.6875)),
                ((0.75, 0.4375, 0.3125), (0.875, 0.8125, 0.375)),
                ((0.75, 0.4375, 0.625), (0.875, 0.8125, 0.6875)),
            ],
            1 => [
                ((0.125, 0.0, 0.375), (0.25, 0.8125, 0.625)),
                ((0.75, 0.0, 0.375), (0.875, 0.8125, 0.625)),
                ((0.25, 0.25, 0.125), (0.75, 1.0, 0.875)),
                ((0.125, 0.4375, 0.3125), (0.25, 0.8125, 0.375)),
                ((0.125, 0.4375, 0.625), (0.25, 0.8125, 0.6875)),
                ((0.75, 0.4375, 0.3125), (0.875, 0.8125, 0.375)),
                ((0.75, 0.4375, 0.625), (0.875, 0.8125, 0.6875)),
            ],
            2 => [
                ((0.375, 0.0, 0.125), (0.625, 0.8125, 0.25)),
                ((0.375, 0.0, 0.75), (0.625, 0.8125, 0.875)),
                ((0.125, 0.25, 0.25), (0.875, 1.0, 0.75)),
                ((0.3125, 0.4375, 0.125), (0.375, 0.8125, 0.25)),
                ((0.3125, 0.4375, 0.75), (0.375, 0.8125, 0.875)),
                ((0.625, 0.4375, 0.125), (0.6875, 0.8125, 0.25)),
                ((0.625, 0.4375, 0.75), (0.6875, 0.8125, 0.875)),
            ],
            3 => [
                ((0.375, 0.0, 0.125), (0.625, 0.8125, 0.25)),
                ((0.375, 0.0, 0.75), (0.625, 0.8125, 0.875)),
                ((0.125, 0.25, 0.25), (0.875, 1.0, 0.75)),
                ((0.3125, 0.4375, 0.125), (0.375, 0.8125, 0.25)),
                ((0.3125, 0.4375, 0.75), (0.375, 0.8125, 0.875)),
                ((0.625, 0.4375, 0.125), (0.6875, 0.8125, 0.25)),
                ((0.625, 0.4375, 0.75), (0.6875, 0.8125, 0.875)),
            ],
            4 => [
                ((0.25, 0.125, 0.0), (0.75, 0.875, 0.75)),
                ((0.125, 0.3125, 0.1875), (0.25, 0.6875, 0.5625)),
                ((0.75, 0.3125, 0.1875), (0.875, 0.6875, 0.5625)),
                ((0.125, 0.375, 0.5625), (0.25, 0.625, 1.0)),
                ((0.75, 0.375, 0.5625), (0.875, 0.625, 1.0)),
            ],
            5 => [
                ((0.25, 0.125, 0.25), (0.75, 0.875, 1.0)),
                ((0.125, 0.3125, 0.4375), (0.25, 0.6875, 0.8125)),
                ((0.75, 0.3125, 0.4375), (0.875, 0.6875, 0.8125)),
                ((0.125, 0.375, 0.0), (0.25, 0.625, 0.4375)),
                ((0.75, 0.375, 0.0), (0.875, 0.625, 0.4375)),
            ],
            6 => [
                ((0.0, 0.125, 0.25), (0.75, 0.875, 0.75)),
                ((0.1875, 0.3125, 0.125), (0.5625, 0.6875, 0.25)),
                ((0.1875, 0.3125, 0.75), (0.5625, 0.6875, 0.875)),
                ((0.5625, 0.375, 0.125), (1.0, 0.625, 0.25)),
                ((0.5625, 0.375, 0.75), (1.0, 0.625, 0.875)),
            ],
            7 => [
                ((0.25, 0.125, 0.25), (1.0, 0.875, 0.75)),
                ((0.4375, 0.3125, 0.125), (0.8125, 0.6875, 0.25)),
                ((0.4375, 0.3125, 0.75), (0.8125, 0.6875, 0.875)),
                ((0.0, 0.375, 0.125), (0.4375, 0.625, 0.25)),
                ((0.0, 0.375, 0.75), (0.4375, 0.625, 0.875)),
            ],
            8 => [
                ((0.25, 0.0, 0.125), (0.75, 0.75, 0.875)),
                ((0.125, 0.1875, 0.3125), (0.25, 0.5625, 0.6875)),
                ((0.75, 0.1875, 0.3125), (0.875, 0.5625, 0.6875)),
                ((0.125, 0.5625, 0.375), (0.25, 1.0, 0.625)),
                ((0.75, 0.5625, 0.375), (0.875, 1.0, 0.625)),
            ],
            9 => [
                ((0.25, 0.0, 0.125), (0.75, 0.75, 0.875)),
                ((0.125, 0.1875, 0.3125), (0.25, 0.5625, 0.6875)),
                ((0.75, 0.1875, 0.3125), (0.875, 0.5625, 0.6875)),
                ((0.125, 0.5625, 0.375), (0.25, 1.0, 0.625)),
                ((0.75, 0.5625, 0.375), (0.875, 1.0, 0.625)),
            ],
            10 => [
                ((0.125, 0.0, 0.25), (0.875, 0.75, 0.75)),
                ((0.3125, 0.1875, 0.125), (0.6875, 0.5625, 0.25)),
                ((0.3125, 0.1875, 0.75), (0.6875, 0.5625, 0.875)),
                ((0.375, 0.5625, 0.125), (0.625, 1.0, 0.25)),
                ((0.375, 0.5625, 0.75), (0.625, 1.0, 0.875)),
            ],
            11 => [
                ((0.125, 0.0, 0.25), (0.875, 0.75, 0.75)),
                ((0.3125, 0.1875, 0.125), (0.6875, 0.5625, 0.25)),
                ((0.3125, 0.1875, 0.75), (0.6875, 0.5625, 0.875)),
                ((0.375, 0.5625, 0.125), (0.625, 1.0, 0.25)),
                ((0.375, 0.5625, 0.75), (0.625, 1.0, 0.875)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Lectern {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            has_book: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if has_book { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lectern") },
        variant format!("facing={}", facing.as_string()),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.125, 1.0)),
                ((0.25, 0.125, 0.25), (0.75, 0.875, 0.75)),
            ],
        },
        hardness 2.5,
        best_tools [ Tool::Axe(_), ],
    }
    SmithingTable {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smithing_table") },
        hardness 2.5,
        best_tools [ Tool::Axe(_), ],
    }
    Stonecutter {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
        },
        offset match facing {
            Direction::North => 0,
            Direction::South => 1,
            Direction::West => 2,
            Direction::East => 3,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stonecutter") },
        variant format!("facing={}", facing.as_string()),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.5625, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Bell {
        props {
            attachment: BellAttachment = [BellAttachment::Floor, BellAttachment::Ceiling, BellAttachment::SingleWall, BellAttachment::DoubleWall],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match attachment {
                BellAttachment::Floor => 0,
                BellAttachment::Ceiling => 8,
                BellAttachment::SingleWall => 16,
                BellAttachment::DoubleWall => 24,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "bell") },
        variant format!("attachment={},facing={}", attachment.as_string(), facing.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.25), (1.0, 1.0, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.25), (1.0, 1.0, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.25), (1.0, 1.0, 0.75)),
            ],
            3 => [
                ((0.0, 0.0, 0.25), (1.0, 1.0, 0.75)),
            ],
            4 => [
                ((0.25, 0.0, 0.0), (0.75, 1.0, 1.0)),
            ],
            5 => [
                ((0.25, 0.0, 0.0), (0.75, 1.0, 1.0)),
            ],
            6 => [
                ((0.25, 0.0, 0.0), (0.75, 1.0, 1.0)),
            ],
            7 => [
                ((0.25, 0.0, 0.0), (0.75, 1.0, 1.0)),
            ],
            8 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            9 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            10 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            11 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            12 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            13 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            14 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            15 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.4375), (0.5625, 1.0, 0.5625)),
            ],
            16 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.0), (0.5625, 0.9375, 0.8125)),
            ],
            17 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.0), (0.5625, 0.9375, 0.8125)),
            ],
            18 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.1875), (0.5625, 0.9375, 1.0)),
            ],
            19 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.1875), (0.5625, 0.9375, 1.0)),
            ],
            20 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.0, 0.8125, 0.4375), (0.8125, 0.9375, 0.5625)),
            ],
            21 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.0, 0.8125, 0.4375), (0.8125, 0.9375, 0.5625)),
            ],
            22 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.1875, 0.8125, 0.4375), (1.0, 0.9375, 0.5625)),
            ],
            23 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.1875, 0.8125, 0.4375), (1.0, 0.9375, 0.5625)),
            ],
            24 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.0), (0.5625, 0.9375, 1.0)),
            ],
            25 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.0), (0.5625, 0.9375, 1.0)),
            ],
            26 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.0), (0.5625, 0.9375, 1.0)),
            ],
            27 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.4375, 0.8125, 0.0), (0.5625, 0.9375, 1.0)),
            ],
            28 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.0, 0.8125, 0.4375), (1.0, 0.9375, 0.5625)),
            ],
            29 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.0, 0.8125, 0.4375), (1.0, 0.9375, 0.5625)),
            ],
            30 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.0, 0.8125, 0.4375), (1.0, 0.9375, 0.5625)),
            ],
            31 => [
                ((0.25, 0.25, 0.25), (0.75, 0.375, 0.75)),
                ((0.3125, 0.375, 0.3125), (0.6875, 0.8125, 0.6875)),
                ((0.0, 0.8125, 0.4375), (1.0, 0.9375, 0.5625)),
            ],
        },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Lantern {
        props {
            hanging: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if hanging { 0 } else { 2 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "lantern") },
        variant format!("hanging={}", hanging),
        collision {
            0 => [
                ((0.3125, 0.0625, 0.3125), (0.6875, 0.5, 0.6875)),
                ((0.375, 0.5, 0.375), (0.625, 0.625, 0.625)),
            ],
            1 => [
                ((0.3125, 0.0625, 0.3125), (0.6875, 0.5, 0.6875)),
                ((0.375, 0.5, 0.375), (0.625, 0.625, 0.625)),
            ],
            2 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.4375, 0.6875)),
                ((0.375, 0.4375, 0.375), (0.625, 0.5625, 0.625)),
            ],
            3 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.4375, 0.6875)),
                ((0.375, 0.4375, 0.375), (0.625, 0.5625, 0.625)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SoulLantern {
        props {
            hanging: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if hanging { 0 } else { 2 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 10,
            collidable: true,
        },
        model { ("minecraft", "soul_lantern") },
        variant format!("hanging={}", hanging),
        collision {
            0 => [
                ((0.3125, 0.0625, 0.3125), (0.6875, 0.5, 0.6875)),
                ((0.375, 0.5, 0.375), (0.625, 0.625, 0.625)),
            ],
            1 => [
                ((0.3125, 0.0625, 0.3125), (0.6875, 0.5, 0.6875)),
                ((0.375, 0.5, 0.375), (0.625, 0.625, 0.625)),
            ],
            2 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.4375, 0.6875)),
                ((0.375, 0.4375, 0.375), (0.625, 0.5625, 0.625)),
            ],
            3 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.4375, 0.6875)),
                ((0.375, 0.4375, 0.375), (0.625, 0.5625, 0.625)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    Campfire {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            lit: bool = [true, false],
            signal_fire: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if signal_fire { 0 } else { 2 } +
            if lit { 0 } else { 4 } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "campfire") },
        variant format!("facing={},lit={}", facing.as_string(), lit),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.4375, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    SoulCampfire {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            lit: bool = [true, false],
            signal_fire: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if signal_fire { 0 } else { 2 } +
            if lit { 0 } else { 4 } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 10,
            collidable: true,
        },
        model { ("minecraft", "soul_campfire") },
        variant format!("facing={},lit={}", facing.as_string(), lit),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.4375, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    SweetBerryBush {
        props {
            age: u8 = [0, 1, 2, 3],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "sweet_berry_bush") },
        variant format!("age={}", age),
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    WarpedStem {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "warped_stem") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedWarpedStem {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_warped_stem") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    WarpedHyphae {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "warped_hyphae") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedWarpedHyphae {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_warped_hyphae") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    WarpedNylium {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "warped_nylium") },
        hardness 0.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WarpedFungus {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "warped_fungus") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    WarpedWartBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "warped_wart_block") },
        hardness 1.0,
        best_tools [ Tool::Hoe(_), ],
    }
    WarpedRoots {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "warped_roots") },
        collision { _ => [], },
        hardness 0.0,
    }
    NetherSprouts {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "nether_sprouts") },
        collision { _ => [], },
        hardness 0.0,
    }
    CrimsonStem {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "crimson_stem") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedCrimsonStem {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_crimson_stem") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    CrimsonHyphae {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "crimson_hyphae") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    StrippedCrimsonHyphae {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "stripped_crimson_hyphae") },
        variant format!("axis={}", axis.as_string()),
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    CrimsonNylium {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "crimson_nylium") },
        hardness 0.4,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CrimsonFungus {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "crimson_fungus") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    Shroomlight {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "shroomlight") },
        hardness 1.0,
        best_tools [ Tool::Hoe(_), ],
    }
    WeepingVines {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "weeping_vines") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    WeepingVinesPlant {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "weeping_vines_plant") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    TwistingVines {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
        },
        offset age as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "twisting_vines") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    TwistingVinesPlant {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "twisting_vines_plant") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    CrimsonRoots {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "crimson_roots") },
        collision { _ => [], },
        hardness 0.0,
    }
    CrimsonPlanks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "crimson_planks") },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    WarpedPlanks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "warped_planks") },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    CrimsonSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "crimson_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    WarpedSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "warped_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    CrimsonPressurePlate {
        props {
            powered: bool = [true, false],
        },
        offset if powered { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "crimson_pressure_plate") },
        variant format!("powered={}", powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    WarpedPressurePlate {
        props {
            powered: bool = [true, false],
        },
        offset if powered { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "warped_pressure_plate") },
        variant format!("powered={}", powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    CrimsonFence {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "crimson_fence") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            1 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            3 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            5 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            7 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            9 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            11 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            13 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            17 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            21 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            22 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            24 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            25 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            29 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            30 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            31 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    WarpedFence {
        props {
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if south { 0 } else { 4 } +
            if north { 0 } else { 8 } +
            if east { 0 } else { 16 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "warped_fence") },
        multipart (key, val) => match key {
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            1 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            3 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            5 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            7 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            9 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            11 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
                ((0.625, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            13 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.375, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            17 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            21 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            22 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.375)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 0.625)),
            ],
            24 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            25 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
                ((0.375, 0.0, 0.625), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            29 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            30 => [
                ((0.0, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
            31 => [
                ((0.375, 0.0, 0.375), (0.625, 1.5, 0.625)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    CrimsonTrapdoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            open: bool = [true, false],
            powered: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if powered { 0 } else { 2 } +
            if open { 0 } else { 4 } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 8,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "crimson_trapdoor") },
        variant format!("facing={},half={},open={}", facing.as_string(), half.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            23 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            32 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    WarpedTrapdoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            open: bool = [true, false],
            powered: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if powered { 0 } else { 2 } +
            if open { 0 } else { 4 } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 8,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "warped_trapdoor") },
        variant format!("facing={},half={},open={}", facing.as_string(), half.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            23 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            32 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.8125, 0.0), (1.0, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 0.1875, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    CrimsonFenceGate {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            in_wall: bool = [true, false],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            if in_wall { 0 } else { 4 } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "crimson_fence_gate") },
        variant format!("facing={},in_wall={},open={}", facing.as_string(), in_wall, open),
        collision {
            0 => [
            ],
            1 => [
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            3 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
            ],
            5 => [
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            7 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            11 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
            ],
            13 => [
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
            ],
            17 => [
            ],
            18 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
            ],
            21 => [
            ],
            22 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            24 => [
            ],
            25 => [
            ],
            26 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            28 => [
            ],
            29 => [
            ],
            30 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            31 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    WarpedFenceGate {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            in_wall: bool = [true, false],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            if in_wall { 0 } else { 4 } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "warped_fence_gate") },
        variant format!("facing={},in_wall={},open={}", facing.as_string(), in_wall, open),
        collision {
            0 => [
            ],
            1 => [
            ],
            2 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            3 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            4 => [
            ],
            5 => [
            ],
            6 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            7 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            8 => [
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            11 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            12 => [
            ],
            13 => [
            ],
            14 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            15 => [
                ((0.0, 0.0, 0.375), (1.0, 1.5, 0.625)),
            ],
            16 => [
            ],
            17 => [
            ],
            18 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            19 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            20 => [
            ],
            21 => [
            ],
            22 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            23 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            24 => [
            ],
            25 => [
            ],
            26 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            27 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            28 => [
            ],
            29 => [
            ],
            30 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
            31 => [
                ((0.375, 0.0, 0.0), (0.625, 1.5, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
    }
    CrimsonStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "crimson_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    WarpedStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "warped_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    CrimsonButton {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "crimson_button") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    WarpedButton {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "warped_button") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
        best_tools [ Tool::Axe(_), ],
    }
    CrimsonDoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: DoorHalf = [DoorHalf::Upper, DoorHalf::Lower],
            hinge: Side = [Side::Left, Side::Right],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            match hinge {
                Side::Left => 0,
                Side::Right => 4,
            } +
            match half {
                DoorHalf::Upper => 0,
                DoorHalf::Lower => 8,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "crimson_door") },
        variant format!("facing={},half={},hinge={},open={}", facing.as_string(), half.as_string(), hinge.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            13 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            17 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            23 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            24 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            25 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            32 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            38 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            46 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
    }
    WarpedDoor {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: DoorHalf = [DoorHalf::Upper, DoorHalf::Lower],
            hinge: Side = [Side::Left, Side::Right],
            open: bool = [true, false],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            if open { 0 } else { 2 } +
            match hinge {
                Side::Left => 0,
                Side::Right => 4,
            } +
            match half {
                DoorHalf::Upper => 0,
                DoorHalf::Lower => 8,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 16,
                Direction::West => 32,
                Direction::East => 48,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "warped_door") },
        variant format!("facing={},half={},hinge={},open={}", facing.as_string(), half.as_string(), hinge.as_string(), open),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            7 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            8 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            9 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            11 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            12 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            13 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            17 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            20 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            21 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            23 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            24 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            25 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            27 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            28 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            32 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            33 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            34 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            38 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            39 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            43 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            46 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.8125, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.1875)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            60 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.8125), (1.0, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (0.1875, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Axe(_), ],
    }
    CrimsonSign {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            rotation as usize * 2
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "crimson_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    WarpedSign {
        props {
            rotation: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            rotation as usize * 2
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "warped_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    CrimsonWallSign {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "crimson_wall_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    WarpedWallSign {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: false,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "warped_wall_sign") },
        collision { _ => [], },
        hardness 1.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    StructureBlock {
        props {
            mode: StructureBlockMode = [StructureBlockMode::Save, StructureBlockMode::Load, StructureBlockMode::Corner, StructureBlockMode::Data],
        },
        offset match mode {
            StructureBlockMode::Save => 0,
            StructureBlockMode::Load => 1,
            StructureBlockMode::Corner => 2,
            StructureBlockMode::Data => 3,
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "structure_block") },
        variant format!("mode={}", mode.as_string()),
    }
    Jigsaw {
        props {
            orientation: JigsawOrientation = [JigsawOrientation::DownEast, JigsawOrientation::DownNorth, JigsawOrientation::DownSouth, JigsawOrientation::DownWest, JigsawOrientation::UpEast, JigsawOrientation::UpNorth, JigsawOrientation::UpSouth, JigsawOrientation::UpWest, JigsawOrientation::WestUp, JigsawOrientation::EastUp, JigsawOrientation::NorthUp, JigsawOrientation::SouthUp],
        },
        offset match orientation {
            JigsawOrientation::DownEast => 0,
            JigsawOrientation::DownNorth => 1,
            JigsawOrientation::DownSouth => 2,
            JigsawOrientation::DownWest => 3,
            JigsawOrientation::UpEast => 4,
            JigsawOrientation::UpNorth => 5,
            JigsawOrientation::UpSouth => 6,
            JigsawOrientation::UpWest => 7,
            JigsawOrientation::WestUp => 8,
            JigsawOrientation::EastUp => 9,
            JigsawOrientation::NorthUp => 10,
            JigsawOrientation::SouthUp => 11,
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "jigsaw") },
        variant format!("orientation={}", orientation.as_string()),
    }
    Composter {
        props {
            level: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8],
        },
        offset level as usize,
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "composter") },
        multipart (key, val) => match key {
            "level" => val.contains(&level.to_string()),
            _ => false,
        },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.125, 1.0)),
                ((0.0, 0.125, 0.0), (0.125, 1.0, 1.0)),
                ((0.125, 0.125, 0.0), (1.0, 1.0, 0.125)),
                ((0.125, 0.125, 0.875), (1.0, 1.0, 1.0)),
                ((0.875, 0.125, 0.125), (1.0, 1.0, 0.875)),
            ],
        },
        hardness 0.6,
        best_tools [ Tool::Axe(_), ],
    }
    Target {
        props {
            power: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        },
        offset power as usize,
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "target") },
        hardness 0.5,
        best_tools [ Tool::Hoe(_), ],
    }
    BeeNest {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            honey_level: u8 = [0, 1, 2, 3, 4, 5],
        },
        offset (
            honey_level as usize +
            match facing {
                Direction::North => 0,
                Direction::South => 6,
                Direction::West => 12,
                Direction::East => 18,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "bee_nest") },
        variant format!("facing={},honey_level={}", facing.as_string(), honey_level),
        hardness 0.3,
        best_tools [ Tool::Axe(_), ],
    }
    Beehive {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            honey_level: u8 = [0, 1, 2, 3, 4, 5],
        },
        offset (
            honey_level as usize +
            match facing {
                Direction::North => 0,
                Direction::South => 6,
                Direction::West => 12,
                Direction::East => 18,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "beehive") },
        variant format!("facing={},honey_level={}", facing.as_string(), honey_level),
        hardness 0.6,
        best_tools [ Tool::Axe(_), ],
    }
    HoneyBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "honey_block") },
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.9375, 0.9375)),
            ],
        },
        hardness 0.0,
    }
    HoneycombBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "honeycomb_block") },
        hardness 0.6,
    }
    NetheriteBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "netherite_block") },
        hardness 50.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    AncientDebris {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "ancient_debris") },
        hardness 30.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CryingObsidian {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 10,
            collidable: true,
        },
        model { ("minecraft", "crying_obsidian") },
        hardness 50.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    RespawnAnchor {
        props {
            charges: u8 = [0, 1, 2, 3, 4],
        },
        offset charges as usize,
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "respawn_anchor") },
        variant format!("charges={}", charges),
        hardness 50.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PottedCrimsonFungus {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_crimson_fungus") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedWarpedFungus {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_warped_fungus") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedCrimsonRoots {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_crimson_roots") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedWarpedRoots {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_warped_roots") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    Lodestone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lodestone") },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Blackstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blackstone") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BlackstoneStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blackstone_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    BlackstoneWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blackstone_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    BlackstoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blackstone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedBlackstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_blackstone") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PolishedBlackstoneBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_blackstone_bricks") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CrackedPolishedBlackstoneBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cracked_polished_blackstone_bricks") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    ChiseledPolishedBlackstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chiseled_polished_blackstone") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PolishedBlackstoneBrickSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_blackstone_brick_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedBlackstoneBrickStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_blackstone_brick_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedBlackstoneBrickWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_blackstone_brick_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    GildedBlackstone {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gilded_blackstone") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PolishedBlackstoneStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_blackstone_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedBlackstoneSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_blackstone_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedBlackstonePressurePlate {
        props {
            powered: bool = [true, false],
        },
        offset if powered { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "polished_blackstone_pressure_plate") },
        variant format!("powered={}", powered),
        collision { _ => [], },
        hardness 0.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PolishedBlackstoneButton {
        props {
            face: AttachedFace = [AttachedFace::Floor, AttachedFace::Wall, AttachedFace::Ceiling],
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            powered: bool = [true, false],
        },
        offset (
            if powered { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            } +
            match face {
                AttachedFace::Floor => 0,
                AttachedFace::Wall => 8,
                AttachedFace::Ceiling => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "polished_blackstone_button") },
        variant format!("face={},facing={},powered={}", face.as_string(), facing.as_string(), powered),
        collision { _ => [], },
        hardness 0.5,
    }
    PolishedBlackstoneWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_blackstone_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    ChiseledNetherBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chiseled_nether_bricks") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CrackedNetherBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cracked_nether_bricks") },
        hardness 2.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    QuartzBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "quartz_bricks") },
        hardness 0.8,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Candle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    WhiteCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    OrangeCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    MagentaCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    LightBlueCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    YellowCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    LimeCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    PinkCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    GrayCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    LightGrayCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    CyanCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    PurpleCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    BlueCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    BrownCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    GreenCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    RedCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    BlackCandle {
        props {
            candles: u8 = [1, 2, 3, 4],
            lit: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if lit { 0 } else { 2 } +
            (candles as usize - 1) * 4
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_candle") },
        variant format!("candles={},lit={}", candles, lit),
        collision {
            0 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            1 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            2 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            3 => [
                ((0.4375, 0.0, 0.4375), (0.5625, 0.375, 0.5625)),
            ],
            4 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            5 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            6 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            7 => [
                ((0.3125, 0.0, 0.375), (0.6875, 0.375, 0.5625)),
            ],
            8 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            9 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            10 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            11 => [
                ((0.3125, 0.0, 0.375), (0.625, 0.375, 0.6875)),
            ],
            12 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            13 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            14 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
            15 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.625)),
            ],
        },
        hardness 0.1,
        is_waterlogged waterlogged,
    }
    CandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    WhiteCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "white_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    OrangeCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "orange_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    MagentaCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "magenta_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    LightBlueCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_blue_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    YellowCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "yellow_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    LimeCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lime_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    PinkCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pink_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    GrayCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "gray_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    LightGrayCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "light_gray_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    CyanCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cyan_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    PurpleCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "purple_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    BlueCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "blue_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    BrownCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "brown_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    GreenCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "green_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    RedCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "red_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    BlackCandleCake {
        props {
            lit: bool = [true, false],
        },
        offset if lit { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "black_candle_cake") },
        variant format!("lit={}", lit),
        collision {
            _ => [
                ((0.0625, 0.0, 0.0625), (0.9375, 0.5, 0.9375)),
                ((0.4375, 0.5, 0.4375), (0.5625, 0.875, 0.5625)),
            ],
        },
        hardness 0.5,
    }
    AmethystBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "amethyst_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    BuddingAmethyst {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "budding_amethyst") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    AmethystCluster {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::East => 2,
                Direction::South => 4,
                Direction::West => 6,
                Direction::Up => 8,
                Direction::Down => 10,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 5,
            collidable: true,
        },
        model { ("minecraft", "amethyst_cluster") },
        variant format!("facing={}", facing.as_string()),
        collision {
            0 => [
                ((0.1875, 0.1875, 0.5625), (0.8125, 0.8125, 1.0)),
            ],
            1 => [
                ((0.1875, 0.1875, 0.5625), (0.8125, 0.8125, 1.0)),
            ],
            2 => [
                ((0.0, 0.1875, 0.1875), (0.4375, 0.8125, 0.8125)),
            ],
            3 => [
                ((0.0, 0.1875, 0.1875), (0.4375, 0.8125, 0.8125)),
            ],
            4 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.4375)),
            ],
            5 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.4375)),
            ],
            6 => [
                ((0.5625, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            7 => [
                ((0.5625, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            8 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.4375, 0.8125)),
            ],
            9 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.4375, 0.8125)),
            ],
            10 => [
                ((0.1875, 0.5625, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            11 => [
                ((0.1875, 0.5625, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
        },
        hardness 1.5,
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    LargeAmethystBud {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::East => 2,
                Direction::South => 4,
                Direction::West => 6,
                Direction::Up => 8,
                Direction::Down => 10,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 4,
            collidable: true,
        },
        model { ("minecraft", "large_amethyst_bud") },
        variant format!("facing={}", facing.as_string()),
        collision {
            0 => [
                ((0.1875, 0.1875, 0.6875), (0.8125, 0.8125, 1.0)),
            ],
            1 => [
                ((0.1875, 0.1875, 0.6875), (0.8125, 0.8125, 1.0)),
            ],
            2 => [
                ((0.0, 0.1875, 0.1875), (0.3125, 0.8125, 0.8125)),
            ],
            3 => [
                ((0.0, 0.1875, 0.1875), (0.3125, 0.8125, 0.8125)),
            ],
            4 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.3125)),
            ],
            5 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.3125)),
            ],
            6 => [
                ((0.6875, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            7 => [
                ((0.6875, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            8 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.3125, 0.8125)),
            ],
            9 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.3125, 0.8125)),
            ],
            10 => [
                ((0.1875, 0.6875, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            11 => [
                ((0.1875, 0.6875, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
        },
        hardness 1.5,
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    MediumAmethystBud {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::East => 2,
                Direction::South => 4,
                Direction::West => 6,
                Direction::Up => 8,
                Direction::Down => 10,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 2,
            collidable: true,
        },
        model { ("minecraft", "medium_amethyst_bud") },
        variant format!("facing={}", facing.as_string()),
        collision {
            0 => [
                ((0.1875, 0.1875, 0.75), (0.8125, 0.8125, 1.0)),
            ],
            1 => [
                ((0.1875, 0.1875, 0.75), (0.8125, 0.8125, 1.0)),
            ],
            2 => [
                ((0.0, 0.1875, 0.1875), (0.25, 0.8125, 0.8125)),
            ],
            3 => [
                ((0.0, 0.1875, 0.1875), (0.25, 0.8125, 0.8125)),
            ],
            4 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.25)),
            ],
            5 => [
                ((0.1875, 0.1875, 0.0), (0.8125, 0.8125, 0.25)),
            ],
            6 => [
                ((0.75, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            7 => [
                ((0.75, 0.1875, 0.1875), (1.0, 0.8125, 0.8125)),
            ],
            8 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.25, 0.8125)),
            ],
            9 => [
                ((0.1875, 0.0, 0.1875), (0.8125, 0.25, 0.8125)),
            ],
            10 => [
                ((0.1875, 0.75, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
            11 => [
                ((0.1875, 0.75, 0.1875), (0.8125, 1.0, 0.8125)),
            ],
        },
        hardness 1.5,
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    SmallAmethystBud {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::East => 2,
                Direction::South => 4,
                Direction::West => 6,
                Direction::Up => 8,
                Direction::Down => 10,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 1,
            collidable: true,
        },
        model { ("minecraft", "small_amethyst_bud") },
        variant format!("facing={}", facing.as_string()),
        collision {
            0 => [
                ((0.25, 0.25, 0.8125), (0.75, 0.75, 1.0)),
            ],
            1 => [
                ((0.25, 0.25, 0.8125), (0.75, 0.75, 1.0)),
            ],
            2 => [
                ((0.0, 0.25, 0.25), (0.1875, 0.75, 0.75)),
            ],
            3 => [
                ((0.0, 0.25, 0.25), (0.1875, 0.75, 0.75)),
            ],
            4 => [
                ((0.25, 0.25, 0.0), (0.75, 0.75, 0.1875)),
            ],
            5 => [
                ((0.25, 0.25, 0.0), (0.75, 0.75, 0.1875)),
            ],
            6 => [
                ((0.8125, 0.25, 0.25), (1.0, 0.75, 0.75)),
            ],
            7 => [
                ((0.8125, 0.25, 0.25), (1.0, 0.75, 0.75)),
            ],
            8 => [
                ((0.25, 0.0, 0.25), (0.75, 0.1875, 0.75)),
            ],
            9 => [
                ((0.25, 0.0, 0.25), (0.75, 0.1875, 0.75)),
            ],
            10 => [
                ((0.25, 0.8125, 0.25), (0.75, 1.0, 0.75)),
            ],
            11 => [
                ((0.25, 0.8125, 0.25), (0.75, 1.0, 0.75)),
            ],
        },
        hardness 1.5,
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    Tuff {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "tuff") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    Calcite {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "calcite") },
        hardness 0.75,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    TintedGlass {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "tinted_glass") },
        hardness 0.3,
    }
    PowderSnow {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "powder_snow") },
        collision { _ => [], },
        hardness 0.25,
    }
    SculkSensor {
        props {
            power: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            sculk_sensor_phase: SculkSensorPhase = [SculkSensorPhase::Inactive, SculkSensorPhase::Active, SculkSensorPhase::Cooldown],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match sculk_sensor_phase {
                SculkSensorPhase::Inactive => 0,
                SculkSensorPhase::Active => 2,
                SculkSensorPhase::Cooldown => 4,
            } +
            power as usize * 6
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 1,
            collidable: true,
        },
        model { ("minecraft", "sculk_sensor") },
        variant format!("sculk_sensor_phase={}", sculk_sensor_phase.as_string()),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
        },
        hardness 1.5,
        best_tools [ Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    Sculk {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "sculk") },
        hardness 0.2,
        best_tools [ Tool::Hoe(_), ],
    }
    SculkVein {
        props {
            down: bool = [true, false],
            east: bool = [true, false],
            north: bool = [true, false],
            south: bool = [true, false],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: bool = [true, false],
        },
        offset (
            if west { 0 } else { 1 } +
            if waterlogged { 0 } else { 2 } +
            if up { 0 } else { 4 } +
            if south { 0 } else { 8 } +
            if north { 0 } else { 16 } +
            if east { 0 } else { 32 } +
            if down { 0 } else { 64 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "sculk_vein") },
        multipart (key, val) => match key {
            "down" => val.contains(&down.to_string()),
            "east" => val.contains(&east.to_string()),
            "north" => val.contains(&north.to_string()),
            "south" => val.contains(&south.to_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(&west.to_string()),
            _ => false,
        },
        collision { _ => [], },
        hardness 0.2,
        best_tools [ Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    SculkCatalyst {
        props {
            bloom: bool = [true, false],
        },
        offset if bloom { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 6,
            collidable: true,
        },
        model { ("minecraft", "sculk_catalyst") },
        variant format!("bloom={}", bloom),
        hardness 3.0,
        best_tools [ Tool::Hoe(_), ],
    }
    SculkShrieker {
        props {
            can_summon: bool = [true, false],
            shrieking: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if shrieking { 0 } else { 2 } +
            if can_summon { 0 } else { 4 }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "sculk_shrieker") },
        variant format!("can_summon={}", can_summon),
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
        },
        hardness 3.0,
        best_tools [ Tool::Hoe(_), ],
        is_waterlogged waterlogged,
    }
    OxidizedCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oxidized_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WeatheredCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "weathered_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    ExposedCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "exposed_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CopperBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "copper_block") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CopperOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "copper_ore") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeepslateCopperOre {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_copper_ore") },
        hardness 4.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    OxidizedCutCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oxidized_cut_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WeatheredCutCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "weathered_cut_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    ExposedCutCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "exposed_cut_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CutCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cut_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    OxidizedCutCopperStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oxidized_cut_copper_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    WeatheredCutCopperStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "weathered_cut_copper_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    ExposedCutCopperStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "exposed_cut_copper_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    CutCopperStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cut_copper_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    OxidizedCutCopperSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "oxidized_cut_copper_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    WeatheredCutCopperSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "weathered_cut_copper_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    ExposedCutCopperSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "exposed_cut_copper_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    CutCopperSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cut_copper_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    WaxedCopperBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_copper_block") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WaxedWeatheredCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_weathered_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WaxedExposedCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_exposed_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WaxedOxidizedCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_oxidized_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WaxedOxidizedCutCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_oxidized_cut_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WaxedWeatheredCutCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_weathered_cut_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WaxedExposedCutCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_exposed_cut_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WaxedCutCopper {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_cut_copper") },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    WaxedOxidizedCutCopperStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_oxidized_cut_copper_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    WaxedWeatheredCutCopperStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_weathered_cut_copper_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    WaxedExposedCutCopperStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_exposed_cut_copper_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    WaxedCutCopperStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_cut_copper_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    WaxedOxidizedCutCopperSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_oxidized_cut_copper_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    WaxedWeatheredCutCopperSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_weathered_cut_copper_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    WaxedExposedCutCopperSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_exposed_cut_copper_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    WaxedCutCopperSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "waxed_cut_copper_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    LightningRod {
        props {
            facing: Direction = [Direction::North, Direction::East, Direction::South, Direction::West, Direction::Up, Direction::Down],
            powered: bool = [true, false],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            if powered { 0 } else { 2 } +
            match facing {
                Direction::North => 0,
                Direction::East => 4,
                Direction::South => 8,
                Direction::West => 12,
                Direction::Up => 16,
                Direction::Down => 20,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "lightning_rod") },
        variant format!("facing={},powered={}", facing.as_string(), powered),
        collision {
            0 => [
                ((0.375, 0.375, 0.0), (0.625, 0.625, 1.0)),
            ],
            1 => [
                ((0.375, 0.375, 0.0), (0.625, 0.625, 1.0)),
            ],
            2 => [
                ((0.375, 0.375, 0.0), (0.625, 0.625, 1.0)),
            ],
            3 => [
                ((0.375, 0.375, 0.0), (0.625, 0.625, 1.0)),
            ],
            4 => [
                ((0.0, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            5 => [
                ((0.0, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            6 => [
                ((0.0, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            7 => [
                ((0.0, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            8 => [
                ((0.375, 0.375, 0.0), (0.625, 0.625, 1.0)),
            ],
            9 => [
                ((0.375, 0.375, 0.0), (0.625, 0.625, 1.0)),
            ],
            10 => [
                ((0.375, 0.375, 0.0), (0.625, 0.625, 1.0)),
            ],
            11 => [
                ((0.375, 0.375, 0.0), (0.625, 0.625, 1.0)),
            ],
            12 => [
                ((0.0, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            13 => [
                ((0.0, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            14 => [
                ((0.0, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            15 => [
                ((0.0, 0.375, 0.375), (1.0, 0.625, 0.625)),
            ],
            16 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
            ],
            17 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
            ],
            18 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
            ],
            19 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
            ],
            20 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
            ],
            21 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
            ],
            22 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
            ],
            23 => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
            ],
        },
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PointedDripstone {
        props {
            thickness: DripstoneThickness = [DripstoneThickness::TipMerge, DripstoneThickness::Tip, DripstoneThickness::Frustum, DripstoneThickness::Middle, DripstoneThickness::Base],
            vertical_direction: Direction = [Direction::Up, Direction::Down],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match vertical_direction {
                Direction::Up => 0,
                Direction::Down => 2,
                _ => unreachable!(),
            } +
            match thickness {
                DripstoneThickness::TipMerge => 0,
                DripstoneThickness::Tip => 4,
                DripstoneThickness::Frustum => 8,
                DripstoneThickness::Middle => 12,
                DripstoneThickness::Base => 16,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "pointed_dripstone") },
        variant format!("thickness={},vertical_direction={}", thickness.as_string(), vertical_direction.as_string()),
        collision {
            0 => [
                ((0.1875, 0.0, 0.1875), (0.5625, 1.0, 0.5625)),
            ],
            1 => [
                ((0.1875, 0.0, 0.1875), (0.5625, 1.0, 0.5625)),
            ],
            2 => [
                ((0.1875, 0.0, 0.1875), (0.5625, 1.0, 0.5625)),
            ],
            3 => [
                ((0.1875, 0.0, 0.1875), (0.5625, 1.0, 0.5625)),
            ],
            4 => [
                ((0.1875, 0.0, 0.1875), (0.5625, 0.6875, 0.5625)),
            ],
            5 => [
                ((0.1875, 0.0, 0.1875), (0.5625, 0.6875, 0.5625)),
            ],
            6 => [
                ((0.1875, 0.3125, 0.1875), (0.5625, 1.0, 0.5625)),
            ],
            7 => [
                ((0.1875, 0.3125, 0.1875), (0.5625, 1.0, 0.5625)),
            ],
            8 => [
                ((0.125, 0.0, 0.125), (0.625, 1.0, 0.625)),
            ],
            9 => [
                ((0.125, 0.0, 0.125), (0.625, 1.0, 0.625)),
            ],
            10 => [
                ((0.125, 0.0, 0.125), (0.625, 1.0, 0.625)),
            ],
            11 => [
                ((0.125, 0.0, 0.125), (0.625, 1.0, 0.625)),
            ],
            12 => [
                ((0.0625, 0.0, 0.0625), (0.6875, 1.0, 0.6875)),
            ],
            13 => [
                ((0.0625, 0.0, 0.0625), (0.6875, 1.0, 0.6875)),
            ],
            14 => [
                ((0.0625, 0.0, 0.0625), (0.6875, 1.0, 0.6875)),
            ],
            15 => [
                ((0.0625, 0.0, 0.0625), (0.6875, 1.0, 0.6875)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (0.75, 1.0, 0.75)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (0.75, 1.0, 0.75)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (0.75, 1.0, 0.75)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (0.75, 1.0, 0.75)),
            ],
        },
        hardness 1.5,
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DripstoneBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "dripstone_block") },
        hardness 1.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CaveVines {
        props {
            age: u8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
            berries: bool = [true, false],
        },
        offset (
            if berries { 0 } else { 1 } +
            age as usize * 2
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "cave_vines") },
        variant format!("berries={}", berries),
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    CaveVinesPlant {
        props {
            berries: bool = [true, false],
        },
        offset if berries { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "cave_vines_plant") },
        variant format!("berries={}", berries),
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    SporeBlossom {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "spore_blossom") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    Azalea {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "azalea") },
        collision {
            _ => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
                ((0.0, 0.5, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.5, 0.0), (1.0, 1.0, 0.375)),
                ((0.375, 0.5, 0.625), (1.0, 1.0, 1.0)),
                ((0.625, 0.5, 0.375), (1.0, 1.0, 0.625)),
            ],
        },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    FloweringAzalea {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "flowering_azalea") },
        collision {
            _ => [
                ((0.375, 0.0, 0.375), (0.625, 1.0, 0.625)),
                ((0.0, 0.5, 0.0), (0.375, 1.0, 1.0)),
                ((0.375, 0.5, 0.0), (1.0, 1.0, 0.375)),
                ((0.375, 0.5, 0.625), (1.0, 1.0, 1.0)),
                ((0.625, 0.5, 0.375), (1.0, 1.0, 0.625)),
            ],
        },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
    }
    MossCarpet {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "moss_carpet") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.0625, 1.0)),
            ],
        },
        hardness 0.1,
    }
    MossBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "moss_block") },
        hardness 0.1,
        best_tools [ Tool::Hoe(_), ],
    }
    BigDripleaf {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            tilt: DripleafTilt = [DripleafTilt::None, DripleafTilt::Unstable, DripleafTilt::Partial, DripleafTilt::Full],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match tilt {
                DripleafTilt::None => 0,
                DripleafTilt::Unstable => 2,
                DripleafTilt::Partial => 4,
                DripleafTilt::Full => 6,
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 8,
                Direction::West => 16,
                Direction::East => 24,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "big_dripleaf") },
        variant format!("facing={},tilt={}", facing.as_string(), tilt.as_string()),
        collision {
            0 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            1 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            2 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            3 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            4 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.8125, 1.0)),
            ],
            5 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.8125, 1.0)),
            ],
            6 => [
            ],
            7 => [
            ],
            8 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            9 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            10 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            11 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            12 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.8125, 1.0)),
            ],
            13 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.8125, 1.0)),
            ],
            14 => [
            ],
            15 => [
            ],
            16 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            17 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            18 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            19 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            20 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.8125, 1.0)),
            ],
            21 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.8125, 1.0)),
            ],
            22 => [
            ],
            23 => [
            ],
            24 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            25 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            26 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            27 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.9375, 1.0)),
            ],
            28 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.8125, 1.0)),
            ],
            29 => [
                ((0.0, 0.6875, 0.0), (1.0, 0.8125, 1.0)),
            ],
            30 => [
            ],
            31 => [
            ],
        },
        hardness 0.1,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    BigDripleafStem {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match facing {
                Direction::North => 0,
                Direction::South => 2,
                Direction::West => 4,
                Direction::East => 6,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "big_dripleaf_stem") },
        variant format!("facing={}", facing.as_string()),
        collision { _ => [], },
        hardness 0.1,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    SmallDripleaf {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Upper, BlockHalf::Lower],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match half {
                BlockHalf::Upper => 0,
                BlockHalf::Lower => 2,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 4,
                Direction::West => 8,
                Direction::East => 12,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "small_dripleaf") },
        variant format!("facing={},half={}", facing.as_string(), half.as_string()),
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    HangingRoots {
        props {
            waterlogged: bool = [true, false],
        },
        offset if waterlogged { 0 } else { 1 },
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "hanging_roots") },
        collision { _ => [], },
        hardness 0.0,
        best_tools [ Tool::Axe(_), ],
        is_waterlogged waterlogged,
    }
    RootedDirt {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "rooted_dirt") },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    Mud {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "mud") },
        collision {
            _ => [
                ((0.0, 0.0, 0.0), (1.0, 0.875, 1.0)),
            ],
        },
        hardness 0.5,
        best_tools [ Tool::Shovel(_), ],
    }
    Deepslate {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate") },
        variant format!("axis={}", axis.as_string()),
        hardness 3.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CobbledDeepslate {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cobbled_deepslate") },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CobbledDeepslateStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cobbled_deepslate_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    CobbledDeepslateSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cobbled_deepslate_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    CobbledDeepslateWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cobbled_deepslate_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedDeepslate {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_deepslate") },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PolishedDeepslateStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_deepslate_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedDeepslateSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_deepslate_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    PolishedDeepslateWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "polished_deepslate_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeepslateTiles {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_tiles") },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeepslateTileStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_tile_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeepslateTileSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_tile_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeepslateTileWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_tile_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeepslateBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_bricks") },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    DeepslateBrickStairs {
        props {
            facing: Direction = [Direction::North, Direction::South, Direction::West, Direction::East],
            half: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom],
            shape: StairShape = [StairShape::Straight, StairShape::InnerLeft, StairShape::InnerRight, StairShape::OuterLeft, StairShape::OuterRight],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match shape {
                StairShape::Straight => 0,
                StairShape::InnerLeft => 2,
                StairShape::InnerRight => 4,
                StairShape::OuterLeft => 6,
                StairShape::OuterRight => 8,
            } +
            match half {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 10,
                _ => unreachable!(),
            } +
            match facing {
                Direction::North => 0,
                Direction::South => 20,
                Direction::West => 40,
                Direction::East => 60,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_brick_stairs") },
        variant format!("facing={},half={},shape={}", facing.as_string(), half.as_string(), shape.as_string()),
        collision {
            0 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            6 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            7 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            8 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            9 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            10 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            11 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            12 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            13 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            14 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            15 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            17 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            18 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            19 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            20 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            21 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            22 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            23 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            24 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            25 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            26 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            27 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            28 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            30 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            33 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            34 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            36 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            37 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            38 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            39 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            40 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            41 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            42 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            43 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            44 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            45 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            46 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            47 => [
                ((0.0, 0.0, 0.5), (0.5, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            48 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            49 => [
                ((0.0, 0.0, 0.0), (0.5, 1.0, 0.5)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            50 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            51 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            54 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            55 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            56 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            57 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            59 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            60 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            61 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            63 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.5), (0.5, 1.0, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            65 => [
                ((0.0, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 0.5)),
            ],
            66 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            67 => [
                ((0.5, 0.0, 0.0), (1.0, 1.0, 0.5)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            68 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            69 => [
                ((0.5, 0.0, 0.5), (1.0, 1.0, 1.0)),
                ((0.0, 0.5, 0.0), (0.5, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            70 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            72 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            73 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.0), (1.0, 1.0, 0.5)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            74 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            75 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.0, 0.5, 0.5), (1.0, 1.0, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            76 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            77 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.0), (1.0, 1.0, 0.5)),
            ],
            78 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
            79 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
                ((0.5, 0.5, 0.5), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeepslateBrickSlab {
        props {
            type_: BlockHalf = [BlockHalf::Top, BlockHalf::Bottom, BlockHalf::Double],
            waterlogged: bool = [true, false],
        },
        offset (
            if waterlogged { 0 } else { 1 } +
            match type_ {
                BlockHalf::Top => 0,
                BlockHalf::Bottom => 2,
                BlockHalf::Double => 4,
                _ => unreachable!(),
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_brick_slab") },
        variant format!("type={}", type_.as_string()),
        collision {
            0 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            1 => [
                ((0.0, 0.5, 0.0), (1.0, 1.0, 1.0)),
            ],
            2 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            3 => [
                ((0.0, 0.0, 0.0), (1.0, 0.5, 1.0)),
            ],
            4 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
            5 => [
                ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    DeepslateBrickWall {
        props {
            east: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            north: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            south: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
            up: bool = [true, false],
            waterlogged: bool = [true, false],
            west: WallSide = [WallSide::None, WallSide::Low, WallSide::Tall],
        },
        offset (
            match west {
                WallSide::None => 0,
                WallSide::Low => 1,
                WallSide::Tall => 2,
            } +
            if waterlogged { 0 } else { 3 } +
            if up { 0 } else { 6 } +
            match south {
                WallSide::None => 0,
                WallSide::Low => 12,
                WallSide::Tall => 24,
            } +
            match north {
                WallSide::None => 0,
                WallSide::Low => 36,
                WallSide::Tall => 72,
            } +
            match east {
                WallSide::None => 0,
                WallSide::Low => 108,
                WallSide::Tall => 216,
            }
        ),
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 0,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "deepslate_brick_wall") },
        multipart (key, val) => match key {
            "east" => val.contains(east.as_string()),
            "north" => val.contains(north.as_string()),
            "south" => val.contains(south.as_string()),
            "up" => val.contains(&up.to_string()),
            "waterlogged" => val.contains(&waterlogged.to_string()),
            "west" => val.contains(west.as_string()),
            _ => false,
        },
        collision {
            0 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            1 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            2 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            3 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
            ],
            4 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            5 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            6 => [
            ],
            7 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            8 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            9 => [
            ],
            10 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            11 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
            ],
            12 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            13 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            14 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            15 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            16 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            17 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            18 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            19 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            20 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            21 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            22 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            23 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            24 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            25 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            26 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            27 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            28 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            29 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            30 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            31 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            32 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            33 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
            ],
            34 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            35 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            36 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            37 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            38 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            39 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            40 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            41 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            42 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            43 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            44 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            45 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            46 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            47 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            48 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            49 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            50 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            51 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            52 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            53 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            54 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            55 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            56 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            57 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            58 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            59 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            60 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            61 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            62 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            63 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            64 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            65 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            66 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            67 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            68 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            69 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            70 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            71 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            72 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            73 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            74 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            75 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            76 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            77 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            78 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            79 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            80 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            81 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
            ],
            82 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            83 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            84 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            85 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            86 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            87 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            88 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            89 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            90 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            91 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            92 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            93 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            94 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            95 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            96 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            97 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            98 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            99 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            100 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            101 => [
                ((0.0, 0.0, 0.3125), (0.75, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            102 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            103 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            104 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            105 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
            ],
            106 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            107 => [
                ((0.0, 0.0, 0.3125), (0.6875, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            108 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            109 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            110 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            111 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            112 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            113 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            114 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            115 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            116 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            117 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            118 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            119 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            120 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            121 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            122 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            123 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            124 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            125 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            126 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            127 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            128 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            129 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            130 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            131 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            132 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            133 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            134 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            135 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            136 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            137 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            138 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            139 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            140 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            141 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            142 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            143 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            144 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            145 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            146 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            147 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            148 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            149 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            150 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            151 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            152 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            153 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            154 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            155 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            156 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            157 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            158 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            159 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            160 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            161 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            162 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            163 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            164 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            165 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            166 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            167 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            168 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            169 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            170 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            171 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            172 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            173 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            174 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            175 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            176 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            177 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            178 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            179 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            180 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            181 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            182 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            183 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            184 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            185 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            186 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            187 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            188 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            189 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            190 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            191 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            192 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            193 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            194 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            195 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            196 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            197 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            198 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            199 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            200 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            201 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            202 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            203 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            204 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            205 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            206 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            207 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            208 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            209 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            210 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            211 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            212 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            213 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            214 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            215 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            216 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            217 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            218 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            219 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            220 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            221 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
            ],
            222 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            223 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            224 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            225 => [
                ((0.3125, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            226 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            227 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            228 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            229 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            230 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            231 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            232 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            233 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            234 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            235 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            236 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            237 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            238 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            239 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            240 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            241 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            242 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            243 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            244 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            245 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            246 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            247 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            248 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            249 => [
                ((0.3125, 0.0, 0.3125), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            250 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            251 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            252 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            253 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            254 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            255 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            256 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            257 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            258 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            259 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            260 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            261 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            262 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            263 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            264 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            265 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            266 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            267 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            268 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            269 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            270 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            271 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            272 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            273 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            274 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            275 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            276 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            277 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            278 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            279 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            280 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            281 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            282 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            283 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            284 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            285 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            286 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            287 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            288 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            289 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            290 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            291 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            292 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            293 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
            ],
            294 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            295 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            296 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            297 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.6875)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            298 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            299 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
            ],
            300 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            301 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            302 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            303 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            304 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            305 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            306 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            307 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            308 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            309 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            310 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            311 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            312 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            313 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            314 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            315 => [
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
                ((0.75, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            316 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            317 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.25, 0.0, 0.25), (0.75, 1.5, 0.3125)),
                ((0.25, 0.0, 0.6875), (0.75, 1.5, 0.75)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.25)),
                ((0.3125, 0.0, 0.75), (0.6875, 1.5, 1.0)),
            ],
            318 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            319 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            320 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            321 => [
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 1.0)),
                ((0.6875, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
            ],
            322 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
            323 => [
                ((0.0, 0.0, 0.3125), (1.0, 1.5, 0.6875)),
                ((0.3125, 0.0, 0.0), (0.6875, 1.5, 0.3125)),
                ((0.3125, 0.0, 0.6875), (0.6875, 1.5, 1.0)),
            ],
        },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
        is_waterlogged waterlogged,
    }
    ChiseledDeepslate {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "chiseled_deepslate") },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CrackedDeepslateBricks {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cracked_deepslate_bricks") },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    CrackedDeepslateTiles {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "cracked_deepslate_tiles") },
        hardness 3.5,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    InfestedDeepslate {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "infested_deepslate") },
        variant format!("axis={}", axis.as_string()),
        hardness 1.5,
        best_tools [ Tool::Pickaxe(_), ],
    }
    SmoothBasalt {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "smooth_basalt") },
        hardness 1.25,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Wooden),
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Golden),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    RawIronBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "raw_iron_block") },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    RawCopperBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "raw_copper_block") },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Stone),
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    RawGoldBlock {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "raw_gold_block") },
        hardness 5.0,
        harvest_tools [
            Tool::Pickaxe(ToolMaterial::Iron),
            Tool::Pickaxe(ToolMaterial::Diamond),
            Tool::Pickaxe(ToolMaterial::Netherite),
        ],
        best_tools [ Tool::Pickaxe(_), ],
    }
    PottedAzaleaBush {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_azalea_bush") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    PottedFloweringAzaleaBush {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "potted_flowering_azalea_bush") },
        collision {
            _ => [
                ((0.3125, 0.0, 0.3125), (0.6875, 0.375, 0.6875)),
            ],
        },
        hardness 0.0,
    }
    OchreFroglight {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "ochre_froglight") },
        variant format!("axis={}", axis.as_string()),
        hardness 0.3,
    }
    VerdantFroglight {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "verdant_froglight") },
        variant format!("axis={}", axis.as_string()),
        hardness 0.3,
    }
    PearlescentFroglight {
        props {
            axis: Axis = [Axis::X, Axis::Y, Axis::Z],
        },
        offset match axis {
            Axis::X => 0,
            Axis::Y => 1,
            Axis::Z => 2,
            _ => unreachable!(),
        },
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 15,
            collidable: true,
        },
        model { ("minecraft", "pearlescent_froglight") },
        variant format!("axis={}", axis.as_string()),
        hardness 0.3,
    }
    Frogspawn {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: false,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 1,
            emitted_light: 0,
            collidable: false,
        },
        model { ("minecraft", "frogspawn") },
        collision { _ => [], },
        hardness 0.0,
    }
    ReinforcedDeepslate {
        props {},
        material material::Material {
            renderable: true,
            should_cull_against: true,
            never_cull: false,
            force_shade: false,
            transparent: false,
            absorbed_light: 15,
            emitted_light: 0,
            collidable: true,
        },
        model { ("minecraft", "reinforced_deepslate") },
        hardness 55.0,
    }
    Missing {
        props {},
        material material::SOLID,
        model { ("leafish", "missing_block") },
    }
}
