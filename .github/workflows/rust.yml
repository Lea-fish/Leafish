name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  cancel-in-progress: true
  group: "ci-${{ github.workflow }}-${{ github.ref }}"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTDOCFLAGS: "--deny warnings"
  RUSTFLAGS: "--deny warnings -Cdebuginfo=0"
  RUST_BACKTRACE: full

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target-name: leafish
            release-name: leafish-linux
          - os: windows-latest
            target-name: leafish.exe
            release-name: leafish.exe
          - os: macos-11
            target-name: bundle/osx/Leafish.app.zip
            release-name: Leafish.app

    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
          default: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-rustc_hash-${{ steps.toolchain.outputs.rustc_hash }}-Cargo.lock_hash-${{ hashFiles('**/Cargo.lock') }}

      - name: "[Linux ONLY] Install dependencies"
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libgtk-3-dev

      - name: "[Linux ONLY] Check formatting"
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          cargo fmt --all -- --check

      - name: Run clippy
        uses: actions-rs/clippy-check@v1.0.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets -- -W clippy::await_holding_refcell_ref -W clippy::checked_conversions -W clippy::copy_iterator -W clippy::debug_assert_with_mut_call -W clippy::explicit_into_iter_loop -W clippy::explicit_iter_loop -W clippy::filter_map_next -W clippy::flat_map_option -W clippy::implicit_clone -W clippy::implicit_saturating_sub -W clippy::imprecise_flops -W clippy::lossy_float_literal -W clippy::manual_ok_or -W clippy::map_flatten -W clippy::needless_for_each -W clippy::nonstandard_macro_braces -W clippy::path_buf_push_overwrite -W clippy::rc_buffer -W clippy::rest_pat_in_fully_bound_structs -W clippy::string_lit_as_bytes -W clippy::string_to_string -W clippy::suspicious_operation_groupings -W clippy::trait_duplication_in_bounds -W clippy::unnested_or_patterns -W clippy::useless_let_if_seq -W clippy::useless_transmute

      - name: Build binary
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.14
        run: cargo build --verbose --release
      - name: Run tests
        run: cargo test --verbose

      - name: "[MacOS ONLY] Package binary"
        if: ${{ matrix.os == 'macos-11' }}
        run: |
          chmod a+x target/release/leafish
          cargo install cargo-bundle || echo "cargo-bundle already installed"
          cargo bundle --release
          cd target/release/bundle/osx
          zip -r Leafish.app.zip Leafish.app

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.release-name }}
          path: target/release/${{ matrix.target-name }}

      - name: Release binary
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/release/${{ matrix.name }}
